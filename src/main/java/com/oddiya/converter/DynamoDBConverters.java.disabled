package com.oddiya.converter;

import com.oddiya.entity.*;
import com.oddiya.entity.dynamodb.*;
import org.springframework.stereotype.Component;

import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.util.Date;

/**
 * Converter component for transforming between JPA entities and DynamoDB entities.
 * Provides bidirectional conversion methods for all entity types.
 */
@Component
public class DynamoDBConverters {

    // User conversions
    public DynamoDBUser toUserDynamoDB(User user) {
        if (user == null) return null;
        
        DynamoDBUser dynamoUser = new DynamoDBUser();
        dynamoUser.setId(user.getId());
        dynamoUser.setUsername(user.getUsername());
        dynamoUser.setEmail(user.getEmail());
        dynamoUser.setPasswordHash(user.getPasswordHash());
        dynamoUser.setNickname(user.getNickname());
        dynamoUser.setGender(user.getGender());
        dynamoUser.setAge(user.getAge());
        dynamoUser.setBio(user.getBio());
        dynamoUser.setProfileImageUrl(user.getProfileImageUrl());
        dynamoUser.setOauthProvider(user.getOauthProvider());
        dynamoUser.setOauthProviderId(user.getOauthProviderId());
        dynamoUser.setEmailVerified(user.isEmailVerified());
        dynamoUser.setEmailVerificationToken(user.getEmailVerificationToken());
        dynamoUser.setPasswordResetToken(user.getPasswordResetToken());
        dynamoUser.setPasswordResetTokenExpiry(convertToDate(user.getPasswordResetTokenExpiry()));
        dynamoUser.setCreatedAt(convertToDate(user.getCreatedAt()));
        dynamoUser.setUpdatedAt(convertToDate(user.getUpdatedAt()));
        dynamoUser.setActive(user.isActive());
        
        return dynamoUser;
    }
    
    public User toUserJPA(DynamoDBUser dynamoUser) {
        if (dynamoUser == null) return null;
        
        User user = new User();
        user.setId(dynamoUser.getId());
        user.setUsername(dynamoUser.getUsername());
        user.setEmail(dynamoUser.getEmail());
        user.setPasswordHash(dynamoUser.getPasswordHash());
        user.setNickname(dynamoUser.getNickname());
        user.setGender(dynamoUser.getGender());
        user.setAge(dynamoUser.getAge());
        user.setBio(dynamoUser.getBio());
        user.setProfileImageUrl(dynamoUser.getProfileImageUrl());
        user.setOauthProvider(dynamoUser.getOauthProvider());
        user.setOauthProviderId(dynamoUser.getOauthProviderId());
        user.setEmailVerified(dynamoUser.isEmailVerified());
        user.setEmailVerificationToken(dynamoUser.getEmailVerificationToken());
        user.setPasswordResetToken(dynamoUser.getPasswordResetToken());
        user.setPasswordResetTokenExpiry(convertToLocalDateTime(dynamoUser.getPasswordResetTokenExpiry()));
        user.setCreatedAt(convertToLocalDateTime(dynamoUser.getCreatedAt()));
        user.setUpdatedAt(convertToLocalDateTime(dynamoUser.getUpdatedAt()));
        user.setActive(dynamoUser.isActive());
        
        return user;
    }
    
    // Alias methods for backward compatibility
    public User convertDynamoDBToUser(DynamoDBUser dynamoUser) {
        return toUserJPA(dynamoUser);
    }
    
    public DynamoDBUser convertUserToDynamoDB(User user) {
        return toUserDynamoDB(user);
    }

    // TravelPlan conversions
    public DynamoDBTravelPlan toTravelPlanDynamoDB(TravelPlan travelPlan) {
        if (travelPlan == null) return null;
        
        DynamoDBTravelPlan dynamoPlan = new DynamoDBTravelPlan();
        dynamoPlan.setId(travelPlan.getId());
        dynamoPlan.setUserId(travelPlan.getUserId());
        dynamoPlan.setTitle(travelPlan.getTitle());
        dynamoPlan.setDescription(travelPlan.getDescription());
        dynamoPlan.setDestination(travelPlan.getDestination());
        dynamoPlan.setStartDate(convertToDate(travelPlan.getStartDate()));
        dynamoPlan.setEndDate(convertToDate(travelPlan.getEndDate()));
        dynamoPlan.setBudget(travelPlan.getBudget());
        dynamoPlan.setCurrency(travelPlan.getCurrency());
        dynamoPlan.setStatus(travelPlan.getStatus() != null ? travelPlan.getStatus().name() : null);
        dynamoPlan.setIsPublic(travelPlan.isPublic());
        dynamoPlan.setCreatedAt(convertToDate(travelPlan.getCreatedAt()));
        dynamoPlan.setUpdatedAt(convertToDate(travelPlan.getUpdatedAt()));
        dynamoPlan.setTags(travelPlan.getTags());
        dynamoPlan.setTravellerCount(travelPlan.getTravellerCount());
        dynamoPlan.setTravelStyle(travelPlan.getTravelStyle());
        dynamoPlan.setTransportMode(travelPlan.getTransportMode());
        dynamoPlan.setAccommodationType(travelPlan.getAccommodationType());
        dynamoPlan.setNotes(travelPlan.getNotes());
        
        return dynamoPlan;
    }
    
    public TravelPlan toTravelPlanJPA(DynamoDBTravelPlan dynamoPlan) {
        if (dynamoPlan == null) return null;
        
        TravelPlan travelPlan = new TravelPlan();
        travelPlan.setId(dynamoPlan.getId());
        travelPlan.setUserId(dynamoPlan.getUserId());
        travelPlan.setTitle(dynamoPlan.getTitle());
        travelPlan.setDescription(dynamoPlan.getDescription());
        travelPlan.setDestination(dynamoPlan.getDestination());
        travelPlan.setStartDate(convertToLocalDateTime(dynamoPlan.getStartDate()));
        travelPlan.setEndDate(convertToLocalDateTime(dynamoPlan.getEndDate()));
        travelPlan.setBudget(dynamoPlan.getBudget());
        travelPlan.setCurrency(dynamoPlan.getCurrency());
        travelPlan.setStatus(dynamoPlan.getStatus() != null ? TravelPlanStatus.valueOf(dynamoPlan.getStatus()) : null);
        travelPlan.setPublic(dynamoPlan.getIsPublic());
        travelPlan.setCreatedAt(convertToLocalDateTime(dynamoPlan.getCreatedAt()));
        travelPlan.setUpdatedAt(convertToLocalDateTime(dynamoPlan.getUpdatedAt()));
        travelPlan.setTags(dynamoPlan.getTags());
        travelPlan.setTravellerCount(dynamoPlan.getTravellerCount());
        travelPlan.setTravelStyle(dynamoPlan.getTravelStyle());
        travelPlan.setTransportMode(dynamoPlan.getTransportMode());
        travelPlan.setAccommodationType(dynamoPlan.getAccommodationType());
        travelPlan.setNotes(dynamoPlan.getNotes());
        
        return travelPlan;
    }

    // Place conversions
    public DynamoDBPlace toPlaceDynamoDB(Place place) {
        if (place == null) return null;
        
        DynamoDBPlace dynamoPlace = new DynamoDBPlace();
        dynamoPlace.setId(place.getId());
        dynamoPlace.setName(place.getName());
        dynamoPlace.setType(place.getType());
        dynamoPlace.setAddress(place.getAddress());
        dynamoPlace.setDescription(place.getDescription());
        dynamoPlace.setLatitude(place.getLatitude());
        dynamoPlace.setLongitude(place.getLongitude());
        dynamoPlace.setGoogleMapsUrl(place.getGoogleMapsUrl());
        dynamoPlace.setOpeningHours(place.getOpeningHours());
        dynamoPlace.setRating(place.getRating());
        dynamoPlace.setPriceLevel(place.getPriceLevel());
        dynamoPlace.setWebsite(place.getWebsite());
        dynamoPlace.setPhoneNumber(place.getPhoneNumber());
        dynamoPlace.setImageUrl(place.getImageUrl());
        dynamoPlace.setCreatedAt(convertToDate(place.getCreatedAt()));
        dynamoPlace.setUpdatedAt(convertToDate(place.getUpdatedAt()));
        dynamoPlace.setCountry(place.getCountry());
        dynamoPlace.setCity(place.getCity());
        dynamoPlace.setTags(place.getTags());
        dynamoPlace.setAccessibility(place.getAccessibility());
        dynamoPlace.setCustomAttributes(place.getCustomAttributes());
        
        return dynamoPlace;
    }
    
    public Place toPlaceJPA(DynamoDBPlace dynamoPlace) {
        if (dynamoPlace == null) return null;
        
        Place place = new Place();
        place.setId(dynamoPlace.getId());
        place.setName(dynamoPlace.getName());
        place.setType(dynamoPlace.getType());
        place.setAddress(dynamoPlace.getAddress());
        place.setDescription(dynamoPlace.getDescription());
        place.setLatitude(dynamoPlace.getLatitude());
        place.setLongitude(dynamoPlace.getLongitude());
        place.setGoogleMapsUrl(dynamoPlace.getGoogleMapsUrl());
        place.setOpeningHours(dynamoPlace.getOpeningHours());
        place.setRating(dynamoPlace.getRating());
        place.setPriceLevel(dynamoPlace.getPriceLevel());
        place.setWebsite(dynamoPlace.getWebsite());
        place.setPhoneNumber(dynamoPlace.getPhoneNumber());
        place.setImageUrl(dynamoPlace.getImageUrl());
        place.setCreatedAt(convertToLocalDateTime(dynamoPlace.getCreatedAt()));
        place.setUpdatedAt(convertToLocalDateTime(dynamoPlace.getUpdatedAt()));
        place.setCountry(dynamoPlace.getCountry());
        place.setCity(dynamoPlace.getCity());
        place.setTags(dynamoPlace.getTags());
        place.setAccessibility(dynamoPlace.getAccessibility());
        place.setCustomAttributes(dynamoPlace.getCustomAttributes());
        
        return place;
    }

    // SavedPlan conversions
    public DynamoDBSavedPlan toSavedPlanDynamoDB(SavedPlan savedPlan) {
        if (savedPlan == null) return null;
        
        DynamoDBSavedPlan dynamoSavedPlan = new DynamoDBSavedPlan();
        dynamoSavedPlan.setId(savedPlan.getId());
        dynamoSavedPlan.setUserId(savedPlan.getUserId());
        dynamoSavedPlan.setTravelPlanId(savedPlan.getTravelPlanId());
        dynamoSavedPlan.setSavedAt(convertToDate(savedPlan.getSavedAt()));
        dynamoSavedPlan.setNotes(savedPlan.getNotes());
        
        return dynamoSavedPlan;
    }
    
    public SavedPlan toSavedPlanJPA(DynamoDBSavedPlan dynamoSavedPlan) {
        if (dynamoSavedPlan == null) return null;
        
        SavedPlan savedPlan = new SavedPlan();
        savedPlan.setId(dynamoSavedPlan.getId());
        savedPlan.setUserId(dynamoSavedPlan.getUserId());
        savedPlan.setTravelPlanId(dynamoSavedPlan.getTravelPlanId());
        savedPlan.setSavedAt(convertToLocalDateTime(dynamoSavedPlan.getSavedAt()));
        savedPlan.setNotes(dynamoSavedPlan.getNotes());
        
        return savedPlan;
    }

    // Helper methods for date conversion
    private Date convertToDate(LocalDateTime localDateTime) {
        if (localDateTime == null) return null;
        return Date.from(localDateTime.toInstant(ZoneOffset.UTC));
    }
    
    private LocalDateTime convertToLocalDateTime(Date date) {
        if (date == null) return null;
        return LocalDateTime.ofInstant(date.toInstant(), ZoneOffset.UTC);
    }
}