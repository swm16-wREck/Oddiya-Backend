spring:
  config:
    activate:
      on-profile: dynamodb
  
  # Completely override datasource to prevent PostgreSQL connection
  datasource:
    url: jdbc:h2:mem:dummydb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    username: sa
    password: 
    driver-class-name: org.h2.Driver
    hikari:
      maximum-pool-size: 1
      minimum-idle: 0
      connection-timeout: 5000
      
  # Disable JPA/Hibernate for DynamoDB
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        temp:
          use_jdbc_metadata_defaults: false
        dialect: org.hibernate.dialect.H2Dialect
  
  # Redis configuration for caching (if available)
  redis:
    host: ${SPRING_REDIS_HOST:localhost}
    port: ${SPRING_REDIS_PORT:6379}
    password: ${SPRING_REDIS_PASSWORD:}
    enabled: ${REDIS_ENABLED:false}
  
  cache:
    type: ${CACHE_TYPE:none}

# AWS DynamoDB Configuration
# AWS DynamoDB Configuration
app:
  aws:
    region: ${AWS_REGION:ap-northeast-2}
    access-key: ${AWS_ACCESS_KEY_ID:}
    secret-key: ${AWS_SECRET_ACCESS_KEY:}
    
    # Mock disabled for DynamoDB profile
    mock:
      enabled: false
    
    # DynamoDB Configuration
    dynamodb:
      enabled: true
      endpoint: ${DYNAMODB_ENDPOINT:}
      table-prefix: ${DYNAMODB_TABLE_PREFIX:oddiya_}
      read-capacity: ${DYNAMODB_READ_CAPACITY:5}
      write-capacity: ${DYNAMODB_WRITE_CAPACITY:5}
      billing-mode: ${DYNAMODB_BILLING_MODE:PAY_PER_REQUEST}
      create-tables-on-startup: ${DYNAMODB_CREATE_TABLES:true}
  
    # S3 for file storage
    s3:
      enabled: ${AWS_S3_ENABLED:true}
      bucket: ${S3_BUCKET:oddiya-media}
      region: ${AWS_REGION:ap-northeast-2}
      create-bucket-on-startup: ${S3_CREATE_BUCKET:true}
      
    # SQS for message queuing
    sqs:
      enabled: ${AWS_SQS_ENABLED:true}
      queue-url: ${SQS_QUEUE_URL:}
      create-queues-on-startup: ${SQS_CREATE_QUEUES:true}
      
    # CloudWatch for monitoring
    cloudwatch:
      enabled: ${CLOUDWATCH_ENABLED:true}
      namespace: Oddiya-DynamoDB
      region: ${AWS_REGION:ap-northeast-2}
      enable-detailed-metrics: true
      
    # AWS Health Check Configuration
    health:
      enabled: true
      global-timeout-seconds: 10
      cache-interval-seconds: 30
      detailed-error-reporting: true
      
      dynamodb:
        enabled: true
        timeout-seconds: 5
        test-table-access: true
        test-permissions: true
        
      s3:
        enabled: true
        timeout-seconds: 5
        test-bucket-access: true
        
      sqs:
        enabled: true
        timeout-seconds: 10
        test-queue-access: true

# Actuator endpoints
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: always
  health:
    redis:
      enabled: false
    db:
      enabled: false
    dynamodb:
      enabled: true
  metrics:
    export:
      cloudwatch:
        enabled: true
        namespace: Oddiya-DynamoDB
        region: ${AWS_REGION:ap-northeast-2}

# Supabase configuration (required by OAuth service)
supabase:
  url: ${SUPABASE_URL:https://dummy.supabase.co}
  anon-key: ${SUPABASE_ANON_KEY:dummy-key}
  service-key: ${SUPABASE_SERVICE_KEY:dummy-service-key}
  
# OAuth configuration
oauth:
  google:
    client-id: ${GOOGLE_CLIENT_ID:dummy-google-id}
    client-secret: ${GOOGLE_CLIENT_SECRET:dummy-google-secret}
  kakao:
    client-id: ${KAKAO_CLIENT_ID:dummy-kakao-id}
    client-secret: ${KAKAO_CLIENT_SECRET:dummy-kakao-secret}
  naver:
    client-id: ${NAVER_CLIENT_ID:dummy-naver-id}
    client-secret: ${NAVER_CLIENT_SECRET:dummy-naver-secret}

# Logging
logging:
  level:
    root: INFO
    com.oddiya: INFO
    com.amazonaws: INFO
    software.amazon.awssdk: INFO
    org.springframework.data.dynamodb: DEBUG