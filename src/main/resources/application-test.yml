# Test Configuration
# Profile: test
# Database: PostgreSQL (TestContainers)

spring:
  config:
    activate:
      on-profile: test
      
  # TestContainers PostgreSQL Configuration
  datasource:
    url: jdbc:tc:postgresql:15://localhost/testdb?TC_INITSCRIPT=test-init.sql&TC_DAEMON=true
    driver-class-name: org.testcontainers.jdbc.ContainerDatabaseDriver
    username: test
    password: test
    
    hikari:
      maximum-pool-size: 5
      minimum-idle: 1
      
  # JPA Configuration for Testing
  jpa:
    database: POSTGRESQL
    database-platform: org.hibernate.spatial.dialect.postgis.PostgisPG15Dialect
    hibernate:
      ddl-auto: create-drop
    properties:
      hibernate:
        dialect: org.hibernate.spatial.dialect.postgis.PostgisPG15Dialect
        format_sql: true
        show_sql: true
        use_sql_comments: true
    show-sql: true
    
  # Flyway Configuration for Testing
  flyway:
    enabled: false  # Let tests handle schema creation
    
  # Cache Configuration for Testing
  cache:
    type: none
        
# JWT Configuration for testing
jwt:
  secret: this-is-a-test-secret-key-must-be-at-least-256-bits-long-for-hs256
  expiration: 3600000
  refresh-expiration: 604800000

# OAuth Configuration for testing (mock values)
oauth:
  google:
    client-id: test-google-client-id
  apple:
    client-id: test-apple-client-id

# Disable Redis for testing
  redis:
    host: localhost
    port: 6380
    enabled: false
    
  data:
    redis:
      repositories:
        enabled: false

# Application specific
app:
  cors:
    allowed-origins:
      - http://localhost:3000
      - http://localhost:5173
      
  # Disable AWS services for testing
  aws:
    mock:
      enabled: true
    s3:
      enabled: false
    dynamodb:
      enabled: false
    sqs:
      enabled: false
    cloudwatch:
      enabled: false
    health:
      enabled: false

logging:
  level:
    com.oddiya: DEBUG
    org.springframework.security: DEBUG
    
server:
  port: 8080