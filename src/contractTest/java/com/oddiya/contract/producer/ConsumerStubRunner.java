package com.oddiya.contract.producer;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.cloud.contract.stubrunner.spring.AutoConfigureStubRunner;
import org.springframework.cloud.contract.stubrunner.spring.StubRunnerProperties;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.TestPropertySource;

import static org.springframework.cloud.contract.stubrunner.spring.StubRunnerProperties.StubsMode.LOCAL;

/**
 * Consumer-side test that uses stubs generated by producer contract tests
 * This demonstrates how consumers can test against producer contracts
 */
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.NONE)
@AutoConfigureStubRunner(
    stubsMode = LOCAL,
    ids = "com.oddiya:oddiya:+:stubs:8100"
)
@TestPropertySource(properties = {
    "oddiya.api.url=http://localhost:8100"
})
@ActiveProfiles("stub-runner")
public class ConsumerStubRunner {

    /**
     * This test demonstrates how a consumer service would test against
     * the stubs generated from our producer contracts.
     * 
     * The @AutoConfigureStubRunner annotation:
     * - Starts WireMock servers with our generated stubs
     * - Makes them available at http://localhost:8100
     * - Consumers can make real HTTP calls to test integration
     */
    @Test
    public void should_run_stubs_for_consumer_testing() {
        // Stubs are automatically started by @AutoConfigureStubRunner
        // Consumers can now make HTTP calls to localhost:8100 
        // and get responses based on our contract definitions
        
        // Example consumer test would make actual HTTP calls:
        // RestTemplate restTemplate = new RestTemplate();
        // ResponseEntity<String> response = restTemplate.postForEntity(
        //     "http://localhost:8100/api/v1/auth/login",
        //     loginRequest,
        //     String.class
        // );
        // assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
    }
}