# Environment-Specific Configuration for Oddiya Performance Tests

# ===========================
# LOCAL ENVIRONMENT
# ===========================
local.base.url=http://localhost:8080
local.api.version=/api/v1
local.db.host=localhost
local.db.port=5432
local.db.name=oddiya
local.redis.host=localhost
local.redis.port=6379
local.max.users=50
local.expected.tps=10
local.response.time.threshold=500

# ===========================
# STAGING ENVIRONMENT
# ===========================
staging.base.url=https://staging-api.oddiya.com
staging.api.version=/api/v1
staging.db.host=staging-db.oddiya.com
staging.db.port=5432
staging.db.name=oddiya_staging
staging.redis.host=staging-redis.oddiya.com
staging.redis.port=6379
staging.max.users=500
staging.expected.tps=100
staging.response.time.threshold=300

# ===========================
# PRODUCTION ENVIRONMENT
# ===========================
production.base.url=https://api.oddiya.com
production.api.version=/api/v1
production.db.host=prod-db.oddiya.com
production.db.port=5432
production.db.name=oddiya_production
production.redis.host=prod-redis.oddiya.com
production.redis.port=6379
production.max.users=1000
production.expected.tps=500
production.response.time.threshold=200

# ===========================
# LOAD BALANCER CONFIGURATION
# ===========================
load.balancer.health.check.path=/actuator/health
load.balancer.timeout=30000
load.balancer.retry.attempts=3

# ===========================
# DATABASE PERFORMANCE LIMITS
# ===========================
# Local Environment
local.db.connection.pool.max=10
local.db.query.timeout=5000
local.db.connection.timeout=3000

# Staging Environment
staging.db.connection.pool.max=50
staging.db.query.timeout=10000
staging.db.connection.timeout=5000

# Production Environment
production.db.connection.pool.max=100
production.db.query.timeout=30000
production.db.connection.timeout=10000

# ===========================
# CACHING CONFIGURATION
# ===========================
# Redis Performance Limits
redis.connection.pool.max=20
redis.timeout=2000
redis.retry.attempts=3

# Cache Hit Rate Targets
cache.hit.rate.target=80
cache.eviction.threshold=90

# ===========================
# JVM CONFIGURATION BY ENVIRONMENT
# ===========================
# Local JVM Settings
local.jvm.heap.min=256m
local.jvm.heap.max=1g
local.jvm.threads.max=50

# Staging JVM Settings
staging.jvm.heap.min=1g
staging.jvm.heap.max=4g
staging.jvm.threads.max=200

# Production JVM Settings
production.jvm.heap.min=2g
production.jvm.heap.max=8g
production.jvm.threads.max=500

# ===========================
# MONITORING ENDPOINTS
# ===========================
actuator.health.endpoint=/actuator/health
actuator.metrics.endpoint=/actuator/metrics
actuator.prometheus.endpoint=/actuator/prometheus
actuator.info.endpoint=/actuator/info

# ===========================
# PERFORMANCE THRESHOLDS BY ENVIRONMENT
# ===========================
# Local Thresholds
local.cpu.threshold=70
local.memory.threshold=80
local.disk.threshold=80
local.network.threshold=70

# Staging Thresholds
staging.cpu.threshold=75
staging.memory.threshold=85
staging.disk.threshold=85
staging.network.threshold=75

# Production Thresholds
production.cpu.threshold=80
production.memory.threshold=85
production.disk.threshold=90
production.network.threshold=80

# ===========================
# ERROR RATE THRESHOLDS
# ===========================
local.error.rate.warning=2.0
local.error.rate.critical=5.0

staging.error.rate.warning=1.5
staging.error.rate.critical=3.0

production.error.rate.warning=1.0
production.error.rate.critical=2.0

# ===========================
# AUTHENTICATION CONFIGURATION
# ===========================
auth.jwt.issuer=https://auth.oddiya.com
auth.jwt.audience=oddiya-api
auth.token.expiry.seconds=3600
auth.refresh.token.expiry.seconds=86400

# Test User Configuration
test.users.file=config/test-users.csv
test.admin.user=admin@oddiya.com
test.admin.password=AdminPass123!

# ===========================
# EXTERNAL SERVICES
# ===========================
# AWS Services
aws.region=ap-northeast-2
aws.s3.bucket.staging=oddiya-staging-media
aws.s3.bucket.production=oddiya-production-media
aws.cloudwatch.namespace=Oddiya/Performance

# Third-party APIs
google.maps.api.rate.limit=100
korea.tourism.api.rate.limit=50
supabase.api.rate.limit=200

# ===========================
# TEST DATA CONFIGURATION
# ===========================
test.data.places.count=1000
test.data.users.count=500
test.data.travel.plans.count=200
test.data.reviews.count=2000
test.data.images.count=1000

# ===========================
# REPORTING CONFIGURATION
# ===========================
report.output.directory=results/reports
report.retention.days=30
report.email.notifications=true
report.slack.webhook.url=https://hooks.slack.com/oddiya-performance
report.dashboard.url=https://grafana.oddiya.com/performance

# ===========================
# CONTINUOUS PERFORMANCE TESTING
# ===========================
ci.performance.test.enabled=true
ci.performance.baseline.file=baseline/performance-baseline.json
ci.performance.degradation.threshold=10
ci.performance.failure.threshold=25