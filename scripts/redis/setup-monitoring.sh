#!/bin/bash
# Redis Monitoring Setup Script
# Agent 6 - Monitoring & Operations Engineer

set -e

# Configuration variables
INSTALL_DIR="${INSTALL_DIR:-/opt/oddiya-redis}"
LOG_DIR="${LOG_DIR:-/var/log/redis}"
CRON_USER="${CRON_USER:-redis}"
ENVIRONMENT="${ENVIRONMENT:-dev}"
BACKUP_S3_BUCKET="${BACKUP_S3_BUCKET:-oddiya-redis-backups}"
MONITORING_INTERVAL="${MONITORING_INTERVAL:-5}"  # minutes
BACKUP_SCHEDULE="${BACKUP_SCHEDULE:-0 2 * * *}"  # Daily at 2 AM
PERFORMANCE_SCHEDULE="${PERFORMANCE_SCHEDULE:-0 6 * * 0}"  # Weekly Sunday at 6 AM

# Alert configuration
ALERT_EMAIL="${ALERT_EMAIL:-}"
SLACK_WEBHOOK="${SLACK_WEBHOOK:-}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Functions
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}

# Check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        error "This script must be run as root for system configuration"
    fi
}

# Install system dependencies
install_dependencies() {
    log "Installing system dependencies..."
    
    # Detect package manager
    if command -v apt-get &> /dev/null; then
        apt-get update -qq
        apt-get install -y redis-tools awscli mailutils curl jq
    elif command -v yum &> /dev/null; then
        yum update -y -q
        yum install -y redis awscli mailx curl jq
    elif command -v dnf &> /dev/null; then
        dnf update -y -q
        dnf install -y redis awscli mailx curl jq
    else
        warning "Package manager not detected. Please install redis-tools, awscli, mail, curl, and jq manually."
    fi
    
    success "Dependencies installed"
}

# Create monitoring user and directories
setup_user_and_directories() {
    log "Setting up monitoring user and directories..."
    
    # Create redis user if it doesn't exist
    if ! id "$CRON_USER" &>/dev/null; then
        useradd -r -s /bin/bash -d /var/lib/redis -m "$CRON_USER"
        log "Created user: $CRON_USER"
    fi
    
    # Create directories
    mkdir -p "$INSTALL_DIR"/{scripts,configs,logs}
    mkdir -p "$LOG_DIR"/{backups,monitoring,performance}
    mkdir -p /var/lib/redis/{backups,data}
    
    # Set ownership and permissions
    chown -R "$CRON_USER:$CRON_USER" "$INSTALL_DIR"
    chown -R "$CRON_USER:$CRON_USER" "$LOG_DIR"
    chown -R "$CRON_USER:$CRON_USER" /var/lib/redis
    
    chmod 755 "$INSTALL_DIR"
    chmod 755 "$LOG_DIR"
    chmod 750 /var/lib/redis/backups
    
    success "User and directories configured"
}

# Copy monitoring scripts
install_scripts() {
    log "Installing monitoring scripts..."
    
    local script_dir="$(dirname "$(realpath "$0")")"
    
    # Copy scripts to install directory
    if [[ -f "$script_dir/redis-monitor.sh" ]]; then
        cp "$script_dir/redis-monitor.sh" "$INSTALL_DIR/scripts/"
        chmod +x "$INSTALL_DIR/scripts/redis-monitor.sh"
        log "Installed redis-monitor.sh"
    else
        warning "redis-monitor.sh not found in $script_dir"
    fi
    
    if [[ -f "$script_dir/redis-backup.sh" ]]; then
        cp "$script_dir/redis-backup.sh" "$INSTALL_DIR/scripts/"
        chmod +x "$INSTALL_DIR/scripts/redis-backup.sh"
        log "Installed redis-backup.sh"
    else
        warning "redis-backup.sh not found in $script_dir"
    fi
    
    if [[ -f "$script_dir/redis-performance-test.sh" ]]; then
        cp "$script_dir/redis-performance-test.sh" "$INSTALL_DIR/scripts/"
        chmod +x "$INSTALL_DIR/scripts/redis-performance-test.sh"
        log "Installed redis-performance-test.sh"
    else
        warning "redis-performance-test.sh not found in $script_dir"
    fi
    
    # Create wrapper scripts
    create_wrapper_scripts
    
    success "Scripts installed"
}

# Create wrapper scripts with environment configuration
create_wrapper_scripts() {
    log "Creating wrapper scripts..."
    
    # Monitoring wrapper
    cat > "$INSTALL_DIR/scripts/monitor-wrapper.sh" << EOF
#!/bin/bash
# Redis Monitoring Wrapper Script
# Generated by setup-monitoring.sh

export REDIS_HOST="\${REDIS_HOST:-localhost}"
export REDIS_PORT="\${REDIS_PORT:-6379}"
export REDIS_PASSWORD="\${REDIS_PASSWORD:-}"
export ENVIRONMENT="$ENVIRONMENT"
export LOG_FILE="$LOG_DIR/monitoring/monitor-\$(date +%Y%m%d).log"
export METRICS_FILE="$LOG_DIR/monitoring/metrics-\$(date +%Y%m%d-%H%M%S).json"
export ALERT_EMAIL="$ALERT_EMAIL"
export SLACK_WEBHOOK="$SLACK_WEBHOOK"
export CLOUDWATCH_NAMESPACE="Oddiya/Redis/$ENVIRONMENT"

# Rotate logs if they get too large
find $LOG_DIR/monitoring -name "monitor-*.log" -size +100M -exec gzip {} \\;
find $LOG_DIR/monitoring -name "monitor-*.log.gz" -mtime +7 -delete

$INSTALL_DIR/scripts/redis-monitor.sh "\$@"
EOF

    # Backup wrapper
    cat > "$INSTALL_DIR/scripts/backup-wrapper.sh" << EOF
#!/bin/bash
# Redis Backup Wrapper Script
# Generated by setup-monitoring.sh

export REDIS_HOST="\${REDIS_HOST:-localhost}"
export REDIS_PORT="\${REDIS_PORT:-6379}"
export REDIS_PASSWORD="\${REDIS_PASSWORD:-}"
export ENVIRONMENT="$ENVIRONMENT"
export BACKUP_DIR="/var/lib/redis/backups"
export S3_BUCKET="$BACKUP_S3_BUCKET"
export S3_PREFIX="redis-backups"
export LOG_FILE="$LOG_DIR/backups/backup-\$(date +%Y%m%d).log"
export ALERT_EMAIL="$ALERT_EMAIL"
export SLACK_WEBHOOK="$SLACK_WEBHOOK"
export RETENTION_DAYS="30"
export COMPRESSION="true"

# Rotate backup logs
find $LOG_DIR/backups -name "backup-*.log" -mtime +30 -delete

$INSTALL_DIR/scripts/redis-backup.sh "\$@"
EOF

    # Performance test wrapper
    cat > "$INSTALL_DIR/scripts/performance-wrapper.sh" << EOF
#!/bin/bash
# Redis Performance Test Wrapper Script
# Generated by setup-monitoring.sh

export REDIS_HOST="\${REDIS_HOST:-localhost}"
export REDIS_PORT="\${REDIS_PORT:-6379}"
export REDIS_PASSWORD="\${REDIS_PASSWORD:-}"
export ENVIRONMENT="$ENVIRONMENT"
export RESULTS_DIR="$LOG_DIR/performance"
export CONCURRENT_CLIENTS="50"
export REQUESTS_PER_CLIENT="10000"

# Clean up old performance results
find $LOG_DIR/performance -name "performance_test_*.json" -mtime +90 -delete
find $LOG_DIR/performance -name "performance_test_*.log" -mtime +90 -delete

$INSTALL_DIR/scripts/redis-performance-test.sh "\$@"
EOF

    # Make wrapper scripts executable
    chmod +x "$INSTALL_DIR/scripts/monitor-wrapper.sh"
    chmod +x "$INSTALL_DIR/scripts/backup-wrapper.sh"
    chmod +x "$INSTALL_DIR/scripts/performance-wrapper.sh"
    
    log "Wrapper scripts created"
}

# Configure cron jobs
setup_cron_jobs() {
    log "Setting up cron jobs..."
    
    # Create cron file for redis user
    cat > "/tmp/redis-cron" << EOF
# Redis Monitoring Cron Jobs
# Generated by setup-monitoring.sh on $(date)

# Monitor Redis every $MONITORING_INTERVAL minutes
*/$MONITORING_INTERVAL * * * * $INSTALL_DIR/scripts/monitor-wrapper.sh >/dev/null 2>&1

# Daily backup at $(echo "$BACKUP_SCHEDULE" | cut -d' ' -f2):$(echo "$BACKUP_SCHEDULE" | cut -d' ' -f1)
$BACKUP_SCHEDULE $INSTALL_DIR/scripts/backup-wrapper.sh >/dev/null 2>&1

# Weekly performance test $(echo "$PERFORMANCE_SCHEDULE" | cut -d' ' -f2-5)
$PERFORMANCE_SCHEDULE $INSTALL_DIR/scripts/performance-wrapper.sh --clients 25 --requests 5000 >/dev/null 2>&1

# Clean up old log files weekly
0 3 * * 0 find $LOG_DIR -name "*.log" -mtime +30 -delete >/dev/null 2>&1

# Clean up old metrics files monthly
0 4 1 * * find $LOG_DIR -name "*.json" -mtime +90 -delete >/dev/null 2>&1
EOF

    # Install cron jobs for redis user
    sudo -u "$CRON_USER" crontab "/tmp/redis-cron"
    rm "/tmp/redis-cron"
    
    # Verify cron installation
    if sudo -u "$CRON_USER" crontab -l | grep -q "redis-monitor"; then
        success "Cron jobs installed successfully"
    else
        error "Failed to install cron jobs"
    fi
}

# Configure log rotation
setup_logrotate() {
    log "Setting up log rotation..."
    
    cat > "/etc/logrotate.d/redis-monitoring" << EOF
$LOG_DIR/monitoring/*.log {
    daily
    rotate 30
    compress
    delaycompress
    missingok
    notifempty
    copytruncate
    su $CRON_USER $CRON_USER
}

$LOG_DIR/backups/*.log {
    daily
    rotate 60
    compress
    delaycompress
    missingok
    notifempty
    copytruncate
    su $CRON_USER $CRON_USER
}

$LOG_DIR/performance/*.log {
    weekly
    rotate 12
    compress
    delaycompress
    missingok
    notifempty
    copytruncate
    su $CRON_USER $CRON_USER
}
EOF

    success "Log rotation configured"
}

# Configure systemd service for monitoring
setup_systemd_service() {
    log "Setting up systemd service for continuous monitoring..."
    
    cat > "/etc/systemd/system/redis-monitor.service" << EOF
[Unit]
Description=Redis Monitoring Service
Documentation=https://github.com/oddiya/redis-monitoring
After=network.target redis.service
Wants=redis.service

[Service]
Type=simple
User=$CRON_USER
Group=$CRON_USER
WorkingDirectory=$INSTALL_DIR
Environment=REDIS_HOST=localhost
Environment=REDIS_PORT=6379
Environment=ENVIRONMENT=$ENVIRONMENT
Environment=LOG_FILE=$LOG_DIR/monitoring/service.log
Environment=ALERT_EMAIL=$ALERT_EMAIL
Environment=SLACK_WEBHOOK=$SLACK_WEBHOOK
ExecStart=$INSTALL_DIR/scripts/monitor-wrapper.sh
Restart=always
RestartSec=300
StandardOutput=journal
StandardError=journal
SyslogIdentifier=redis-monitor

[Install]
WantedBy=multi-user.target
EOF

    # Reload systemd and enable service
    systemctl daemon-reload
    systemctl enable redis-monitor.service
    
    success "Systemd service configured"
}

# Create configuration file
create_config_file() {
    log "Creating configuration file..."
    
    cat > "$INSTALL_DIR/configs/monitoring.conf" << EOF
# Redis Monitoring Configuration
# Generated by setup-monitoring.sh on $(date)

# Redis Connection
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=

# Environment
ENVIRONMENT=$ENVIRONMENT

# Directories
INSTALL_DIR=$INSTALL_DIR
LOG_DIR=$LOG_DIR
BACKUP_DIR=/var/lib/redis/backups

# S3 Configuration
BACKUP_S3_BUCKET=$BACKUP_S3_BUCKET
S3_PREFIX=redis-backups

# Monitoring Thresholds
MEMORY_THRESHOLD=85
CONNECTION_THRESHOLD=1000
MIN_HIT_RATE=70
SLOW_LOG_THRESHOLD=100

# Alerts
ALERT_EMAIL=$ALERT_EMAIL
SLACK_WEBHOOK=$SLACK_WEBHOOK
CLOUDWATCH_NAMESPACE=Oddiya/Redis/$ENVIRONMENT

# Backup Settings
RETENTION_DAYS=30
COMPRESSION=true

# Performance Testing
CONCURRENT_CLIENTS=50
REQUESTS_PER_CLIENT=10000
KEY_SPACE_SIZE=1000000
DATA_SIZE=64

# Scheduling
MONITORING_INTERVAL=$MONITORING_INTERVAL
BACKUP_SCHEDULE=$BACKUP_SCHEDULE
PERFORMANCE_SCHEDULE=$PERFORMANCE_SCHEDULE
EOF

    chown "$CRON_USER:$CRON_USER" "$INSTALL_DIR/configs/monitoring.conf"
    chmod 640 "$INSTALL_DIR/configs/monitoring.conf"
    
    success "Configuration file created"
}

# Test the monitoring setup
test_monitoring_setup() {
    log "Testing monitoring setup..."
    
    # Test monitoring script
    if sudo -u "$CRON_USER" "$INSTALL_DIR/scripts/monitor-wrapper.sh" --help &>/dev/null; then
        success "Monitor script is executable"
    else
        error "Monitor script test failed"
    fi
    
    # Test backup script
    if sudo -u "$CRON_USER" "$INSTALL_DIR/scripts/backup-wrapper.sh" --help &>/dev/null; then
        success "Backup script is executable"
    else
        error "Backup script test failed"
    fi
    
    # Test Redis connectivity
    if sudo -u "$CRON_USER" redis-cli ping &>/dev/null; then
        success "Redis connectivity test passed"
    else
        warning "Redis connectivity test failed - ensure Redis is running"
    fi
    
    # Test AWS CLI (if configured)
    if [[ -n "$BACKUP_S3_BUCKET" ]] && command -v aws &>/dev/null; then
        if aws s3 ls "s3://$BACKUP_S3_BUCKET" &>/dev/null; then
            success "S3 bucket access test passed"
        else
            warning "S3 bucket access test failed - check AWS credentials and bucket permissions"
        fi
    fi
    
    success "Monitoring setup tests completed"
}

# Generate setup summary
generate_summary() {
    log "Generating setup summary..."
    
    local summary="Redis Monitoring Setup Summary
Generated: $(date '+%Y-%m-%d %H:%M:%S %Z')

Installation Details:
- Install Directory: $INSTALL_DIR
- Log Directory: $LOG_DIR
- Monitoring User: $CRON_USER
- Environment: $ENVIRONMENT

Installed Components:
- Redis Monitor Script: $INSTALL_DIR/scripts/redis-monitor.sh
- Redis Backup Script: $INSTALL_DIR/scripts/redis-backup.sh
- Redis Performance Test: $INSTALL_DIR/scripts/redis-performance-test.sh
- Configuration File: $INSTALL_DIR/configs/monitoring.conf

Scheduled Tasks:
- Monitoring: Every $MONITORING_INTERVAL minutes
- Backup: $BACKUP_SCHEDULE
- Performance Test: $PERFORMANCE_SCHEDULE

Services:
- Systemd Service: redis-monitor.service (disabled by default)
- Log Rotation: /etc/logrotate.d/redis-monitoring

Alert Configuration:
- Email: ${ALERT_EMAIL:-Not configured}
- Slack: ${SLACK_WEBHOOK:+Configured}${SLACK_WEBHOOK:-Not configured}

Next Steps:
1. Configure Redis connection settings in $INSTALL_DIR/configs/monitoring.conf
2. Set up AWS credentials for S3 backup (if using S3)
3. Test monitoring manually: sudo -u $CRON_USER $INSTALL_DIR/scripts/monitor-wrapper.sh
4. Test backup manually: sudo -u $CRON_USER $INSTALL_DIR/scripts/backup-wrapper.sh
5. Enable systemd service if needed: systemctl start redis-monitor.service
6. Check cron jobs: sudo -u $CRON_USER crontab -l

Log Files:
- Monitoring: $LOG_DIR/monitoring/
- Backups: $LOG_DIR/backups/
- Performance: $LOG_DIR/performance/"

    echo "$summary"
    echo "$summary" > "$INSTALL_DIR/SETUP_SUMMARY.txt"
    
    success "Setup summary saved to $INSTALL_DIR/SETUP_SUMMARY.txt"
}

# Main setup function
main() {
    local start_time=$(date +%s)
    
    log "Starting Redis monitoring setup..."
    log "Environment: $ENVIRONMENT"
    
    # Check prerequisites
    check_root
    
    # Install dependencies
    install_dependencies
    
    # Setup user and directories
    setup_user_and_directories
    
    # Install monitoring scripts
    install_scripts
    
    # Setup cron jobs
    setup_cron_jobs
    
    # Setup log rotation
    setup_logrotate
    
    # Setup systemd service
    setup_systemd_service
    
    # Create configuration
    create_config_file
    
    # Test setup
    test_monitoring_setup
    
    # Generate summary
    local end_time=$(date +%s)
    local duration=$((end_time - start_time))
    
    log "Setup completed in ${duration} seconds"
    generate_summary
    
    success "Redis monitoring setup completed successfully!"
}

# Show usage information
show_usage() {
    cat << EOF
Redis Monitoring Setup Script

Usage: $0 [OPTIONS]

Options:
    -h, --help                  Show this help message
    -e, --environment ENV       Environment name (default: dev)
    -u, --user USER             Monitoring user (default: redis)
    -d, --install-dir DIR       Installation directory (default: /opt/oddiya-redis)
    -l, --log-dir DIR           Log directory (default: /var/log/redis)
    -b, --s3-bucket BUCKET      S3 backup bucket name
    -i, --interval MINUTES      Monitoring interval in minutes (default: 5)
    --backup-schedule CRON      Backup cron schedule (default: "0 2 * * *")
    --performance-schedule CRON Performance test schedule (default: "0 6 * * 0")
    --alert-email EMAIL         Alert email address
    --slack-webhook URL         Slack webhook URL

Environment Variables:
    ENVIRONMENT, CRON_USER, INSTALL_DIR, LOG_DIR, BACKUP_S3_BUCKET,
    MONITORING_INTERVAL, BACKUP_SCHEDULE, PERFORMANCE_SCHEDULE,
    ALERT_EMAIL, SLACK_WEBHOOK

Examples:
    $0                                              # Basic setup
    $0 --environment prod --user redis-monitor     # Production setup
    $0 --s3-bucket my-backups --alert-email ops@company.com  # With alerts
EOF
}

# Parse command line arguments
parse_arguments() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_usage
                exit 0
                ;;
            -e|--environment)
                ENVIRONMENT="$2"
                shift 2
                ;;
            -u|--user)
                CRON_USER="$2"
                shift 2
                ;;
            -d|--install-dir)
                INSTALL_DIR="$2"
                shift 2
                ;;
            -l|--log-dir)
                LOG_DIR="$2"
                shift 2
                ;;
            -b|--s3-bucket)
                BACKUP_S3_BUCKET="$2"
                shift 2
                ;;
            -i|--interval)
                MONITORING_INTERVAL="$2"
                shift 2
                ;;
            --backup-schedule)
                BACKUP_SCHEDULE="$2"
                shift 2
                ;;
            --performance-schedule)
                PERFORMANCE_SCHEDULE="$2"
                shift 2
                ;;
            --alert-email)
                ALERT_EMAIL="$2"
                shift 2
                ;;
            --slack-webhook)
                SLACK_WEBHOOK="$2"
                shift 2
                ;;
            *)
                error "Unknown argument: $1"
                ;;
        esac
    done
}

# Trap signals for cleanup
trap 'error "Setup script interrupted"' INT TERM

# Parse arguments and run main function
parse_arguments "$@"
main

exit 0