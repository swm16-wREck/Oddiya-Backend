# Redis Sentinel Configuration
# Agent 2 - Redis Configuration Engineer
# High Availability monitoring and automatic failover

################################# GENERAL #####################################

# Sentinel runs on port 26379 by default
port 26379

# By default, Sentinel binds to all interfaces. For security, specify specific IP
bind 0.0.0.0

# Sentinel runs as a daemon
daemonize no

# Working directory for temporary files
dir /var/lib/redis

################################## SECURITY ###################################

# Sentinel authentication password (same as Redis instances)
requirepass CHANGE_ME_REDIS_PASSWORD

# Authentication password for monitored Redis instances
sentinel auth-pass redis-master CHANGE_ME_REDIS_PASSWORD

# Deny potentially dangerous Sentinel commands
sentinel deny-scripts-reconfig yes

################################## MONITORING #################################

# Monitor the master Redis instance
# sentinel monitor <master-name> <ip> <redis-port> <quorum>
# THIS WILL BE SET DYNAMICALLY BY THE SETUP SCRIPT:
sentinel monitor redis-master CHANGE_ME_MASTER_IP 6379 2

# Number of milliseconds the master (or any attached replica or sentinel) should
# be unreachable in order to consider it in ODOWN (Objectively Down) condition
sentinel down-after-milliseconds redis-master 30000

# Requires at least <quorum> Sentinels to agree about the fact the master is not
# reachable, in order to really mark the master as failing, and eventually start
# a fail over procedure if possible
# This is set in the monitor directive above

# Specifies the maximum time in milliseconds to wait for the failover to complete
sentinel failover-timeout redis-master 180000

# How many replicas we can reconfigure to point to the new replica simultaneously
# during the failover. Use a low number if you have very slow network
sentinel parallel-syncs redis-master 1

################################## NOTIFICATION ###############################

# Notification scripts (customize these paths as needed)
# sentinel notification-script redis-master /usr/local/bin/notify.sh
# sentinel client-reconfig-script redis-master /usr/local/bin/reconfig.sh

################################## LOGGING ####################################

# Specify the log level
loglevel notice

# Specify the log file name
logfile /var/log/redis/sentinel.log

# Enable logging to the system logger
syslog-enabled yes

# Specify the syslog identity
syslog-ident redis-sentinel

# Specify the syslog facility
syslog-facility local1

################################# ADVANCED ####################################

# The period in milliseconds that the leader sentinel sends the PING command
# to the other sentinels
sentinel leader-epoch redis-master 0

# The period in milliseconds after which sentinel commands are unblocked
sentinel config-epoch redis-master 0

# Sentinel epoch (will be updated automatically)
sentinel current-epoch 0

# Known slaves and sentinels (updated automatically)
# Format: known-replica <master-name> <ip> <port>
# Format: known-sentinel <master-name> <ip> <port>
# These will be populated automatically by Sentinel

################################# PERFORMANCE ##################################

# The following settings optimize Sentinel for production workloads

# How often (in milliseconds) Sentinel checks the subjective down condition
sentinel subjective-down-degraded-after 30000

# The time in milliseconds an object needs to be unreachable to be considered ODOWN
sentinel objective-down-degraded-after 60000

# Time in milliseconds the master or replica should be unreachable in order to
# consider it in SDOWN (Subjectively Down) condition
sentinel sdown-slave-after 10000

# Configure the maximum time for the INFO command
sentinel info-refresh-period 10000

# Configure tilt mode protection
sentinel tilt-start-period 30000
sentinel tilt-end-period 30000

################################# NOTIFICATION SCRIPTS ####################

# Example notification script configuration
# Uncomment and configure these as needed:

# Script executed when a sentinel is added
# sentinel notification-script redis-master /usr/local/bin/sentinel-notify.sh

# Script executed when the master changes
# sentinel client-reconfig-script redis-master /usr/local/bin/client-reconfig.sh

# Example scripts (create these files if you want notifications):
# /usr/local/bin/sentinel-notify.sh - handles notifications
# /usr/local/bin/client-reconfig.sh - reconfigures clients

################################# COMPATIBILITY ############################

# Sentinel compatibility mode (leave as default unless needed)
# sentinel compat-mode no

# Announce IP and port (useful for NAT environments)
# sentinel announce-ip ""
# sentinel announce-port 26379

################################# CUSTOM COMMANDS ##########################

# Custom command renaming (for security)
# These match the Redis instance renamings
rename-command SENTINEL "SENTINEL_s3n7in3l"

################################# REDIS ENTERPRISE ########################

# If using Redis Enterprise, configure these:
# sentinel redis-enterprise-cluster-name "cluster-name"
# sentinel redis-enterprise-cluster-user "username"
# sentinel redis-enterprise-cluster-password "password"

################################# MONITORING HOOKS #########################

# Custom monitoring hooks can be defined here
# These will be called during various Sentinel events

################################# MULTI-TENANT SUPPORT #####################

# Support for multiple Redis masters (add more monitor directives)
# Example:
# sentinel monitor redis-sessions 10.0.1.100 6379 2
# sentinel auth-pass redis-sessions CHANGE_ME_REDIS_PASSWORD
# sentinel down-after-milliseconds redis-sessions 30000
# sentinel failover-timeout redis-sessions 180000
# sentinel parallel-syncs redis-sessions 1

################################# PRODUCTION TUNING ########################

# Production tuning parameters

# TCP keepalive for sentinel connections
tcp-keepalive 300

# Timeout for connections to Redis instances
sentinel resolve-hostnames no
sentinel announce-hostnames no

# Client timeout (milliseconds)
timeout 0

# Max clients
# maxclients 10000

################################# DEBUGGING #################################

# Debug settings (disable in production)
# sentinel debug-sleep-before-failover 0
# sentinel debug-sleep-after-failover 0

################################# COMMENTS AND NOTES ######################

# Important notes for production deployment:
#
# 1. Always run at least 3 Sentinel instances for proper quorum
# 2. Deploy Sentinels on different physical machines/availability zones
# 3. Configure proper network connectivity between all Sentinel instances
# 4. Monitor Sentinel logs for proper operation
# 5. Test failover scenarios regularly
# 6. Keep Sentinel configuration synchronized across all instances
# 7. Use proper authentication and network security
# 8. Monitor Sentinel performance and tune parameters as needed
#
# Quorum considerations:
# - Quorum = 2 for 3 Sentinels (can handle 1 Sentinel failure)
# - Quorum = 3 for 5 Sentinels (can handle 2 Sentinel failures)
# - Always use odd number of Sentinels to avoid split-brain scenarios
#
# Network considerations:
# - Ensure all Sentinels can reach all Redis instances
# - Ensure all Sentinels can reach each other
# - Configure proper firewall rules for Sentinel port (26379)
# - Consider network partitions in your deployment strategy
#
# Monitoring:
# - Monitor Sentinel logs for ODOWN/SDOWN events
# - Monitor failover frequency and duration
# - Set up alerts for Sentinel connectivity issues
# - Monitor master changes and replica synchronization
#
# Security:
# - Use authentication for both Sentinel and Redis
# - Restrict network access to Sentinel port
# - Consider TLS encryption for production deployments
# - Regularly update Sentinel passwords
# - Monitor for unauthorized access attempts