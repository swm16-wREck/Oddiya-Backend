plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'jacoco'
}

group = 'com.oddiya'
version = '1.0.0'
sourceCompatibility = '21'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    
    // Database
    implementation 'org.postgresql:postgresql:42.7.2'
    implementation 'org.hibernate:hibernate-core:6.4.4.Final'
    implementation 'org.hibernate:hibernate-validator:8.0.1.Final'
    
    // AWS SDK
    implementation platform('software.amazon.awssdk:bom:2.24.5')
    implementation 'software.amazon.awssdk:s3'
    implementation 'software.amazon.awssdk:dynamodb'
    implementation 'software.amazon.awssdk:bedrock'
    implementation 'software.amazon.awssdk:bedrockruntime'
    implementation 'software.amazon.awssdk:sqs'
    
    // Security & JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'
    
    // Supabase Client - Using REST API instead of SDK
    // Note: Supabase Java SDK is not available in Maven Central
    // We'll use REST API with Spring WebClient for Supabase integration
    
    // WebClient for REST API calls (Supabase, Naver Maps)
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    
    // Jackson for JSON processing
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    
    // OpenAPI/Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
    
    // LangChain Java
    implementation 'dev.langchain4j:langchain4j:0.28.0'
    implementation 'dev.langchain4j:langchain4j-bedrock:0.28.0'
    
    // Utilities
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
    implementation 'org.apache.commons:commons-lang3:3.14.0'
    implementation 'commons-io:commons-io:2.15.1'
    
    // Monitoring
    implementation 'io.micrometer:micrometer-registry-cloudwatch2'
    implementation 'io.opentracing.contrib:opentracing-spring-cloud-starter:0.5.9'
    implementation 'io.jaegertracing:jaeger-client:1.8.1'
    
    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'com.h2database:h2'
    runtimeOnly 'com.h2database:h2'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    testImplementation 'org.mockito:mockito-core:5.10.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.10.0'
    testImplementation 'org.assertj:assertj-core:3.25.3'
    testImplementation 'org.testcontainers:testcontainers:1.19.6'
    testImplementation 'org.testcontainers:postgresql:1.19.6'
    testImplementation 'org.testcontainers:junit-jupiter:1.19.6'
    testImplementation 'io.rest-assured:rest-assured:5.4.0'
    testImplementation 'com.github.tomakehurst:wiremock-jre8:3.0.1'
}

tasks.named('test') {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.11"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
        }
        rule {
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.70
            }
        }
    }
}

check {
    dependsOn jacocoTestCoverageVerification
}

springBoot {
    buildInfo()
}

jar {
    enabled = false
}

bootJar {
    archiveFileName = "${project.name}.jar"
    layered {
        enabled = true
    }
}