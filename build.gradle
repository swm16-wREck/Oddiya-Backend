plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'jacoco'
    id 'org.sonarqube' version '4.4.1.3373'
    // id 'org.owasp.dependencycheck' version '8.4.2'  // Temporarily disabled due to CPE parsing errors
    id 'pmd'
    id 'checkstyle'
    id 'com.github.spotbugs' version '5.0.14'
    // id 'org.springframework.cloud.contract' version '4.1.1'  // Temporarily commented for PITest setup
    id 'info.solidsoft.pitest' version '1.15.0'
    id 'maven-publish'
}

group = 'com.oddiya'
version = '1.0.0'
sourceCompatibility = '21'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2023.0.0'
    }
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    
    // Spring Retry
    implementation 'org.springframework.retry:spring-retry'
    implementation 'org.springframework:spring-aspects'
    
    // Database
    implementation 'org.postgresql:postgresql:42.7.2'
    implementation 'org.flywaydb:flyway-core:10.8.1'
    implementation 'org.flywaydb:flyway-database-postgresql:10.8.1'
    implementation 'org.hibernate:hibernate-core:6.4.4.Final'
    implementation 'org.hibernate:hibernate-validator:8.0.1.Final'
    implementation 'org.hibernate:hibernate-spatial:6.4.4.Final'
    
    // AWS SDK
    implementation platform('software.amazon.awssdk:bom:2.24.5')
    implementation 'software.amazon.awssdk:s3'
    implementation 'software.amazon.awssdk:s3-transfer-manager'
    implementation 'software.amazon.awssdk:bedrock'
    implementation 'software.amazon.awssdk:bedrockruntime'
    implementation 'software.amazon.awssdk:sqs'
    implementation 'software.amazon.awssdk:cloudwatch'
    implementation 'software.amazon.awssdk:sns'
    implementation 'software.amazon.awssdk:costexplorer'
    implementation 'software.amazon.awssdk:budgets'
    
    // AWS X-Ray for distributed tracing
    implementation 'com.amazonaws:aws-xray-recorder-sdk-core:2.15.1'
    implementation 'com.amazonaws:aws-xray-recorder-sdk-aws-sdk-v2:2.15.1'
    implementation 'com.amazonaws:aws-xray-recorder-sdk-aws-sdk-v2-instrumentor:2.15.1'
    
    // Spring Cloud AWS for SQS messaging
    implementation platform('io.awspring.cloud:spring-cloud-aws-dependencies:3.1.1')
    implementation 'io.awspring.cloud:spring-cloud-aws-starter-sqs'
    
    // Security & JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'
    
    // Rate Limiting with Bucket4j
    implementation 'com.bucket4j:bucket4j-core:8.10.1'
    implementation 'com.bucket4j:bucket4j-redis:8.10.1'
    
    // Additional Security Features
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security:spring-security-web'
    implementation 'org.springframework.security:spring-security-config'
    
    // Supabase Client - Using REST API instead of SDK
    // Note: Supabase Java SDK is not available in Maven Central
    // We'll use REST API with Spring WebClient for Supabase integration
    
    // WebClient for REST API calls (Supabase, Naver Maps)
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    
    // Apache HTTP Components for RestTemplate
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.3'
    
    // Jackson for JSON processing
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    
    // OpenAPI/Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
    
    // LangChain Java
    implementation 'dev.langchain4j:langchain4j:0.28.0'
    implementation 'dev.langchain4j:langchain4j-bedrock:0.28.0'
    
    // Utilities
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
    implementation 'org.apache.commons:commons-lang3:3.14.0'
    implementation 'commons-io:commons-io:2.15.1'
    
    // Monitoring
    implementation 'io.micrometer:micrometer-registry-cloudwatch2'
    implementation 'io.opentracing.contrib:opentracing-spring-cloud-starter:0.5.9'
    implementation 'io.jaegertracing:jaeger-client:1.8.1'
    
    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.security:spring-security-oauth2-jose'
    testImplementation 'org.springframework.security:spring-security-oauth2-resource-server'
    // H2 database removed for Phase 1 (DynamoDB only)
    // testRuntimeOnly 'com.h2database:h2'
    // runtimeOnly 'com.h2database:h2'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    testImplementation 'org.junit.platform:junit-platform-suite-api:1.10.2'
    testImplementation 'org.junit.platform:junit-platform-suite-engine:1.10.2'
    testImplementation 'org.mockito:mockito-core:5.10.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.10.0'
    testImplementation 'org.assertj:assertj-core:3.25.3'
    
    // Testcontainers for integration testing
    testImplementation 'org.testcontainers:testcontainers:1.19.6'
    testImplementation 'org.testcontainers:postgresql:1.19.6'
    testImplementation 'org.testcontainers:junit-jupiter:1.19.6'
    
    // LocalStack and AWS testing
    testImplementation 'org.testcontainers:localstack:1.19.6'
    testImplementation 'com.amazonaws:aws-java-sdk-core:1.12.633' // For LocalStack compatibility
    
    // Additional testing tools
    testImplementation 'io.rest-assured:rest-assured:5.4.0'
    testImplementation 'com.github.tomakehurst:wiremock-jre8:3.0.1'
    testImplementation 'com.jayway.jsonpath:json-path:2.9.0'
    testImplementation 'org.awaitility:awaitility:4.2.0'
    testImplementation 'net.datafaker:datafaker:2.0.2'
    
    // Spring Cloud Contract dependencies (temporarily commented for PITest setup)
    // testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-verifier'
    // testImplementation 'org.springframework.cloud:spring-cloud-contract-wiremock'
    // testImplementation 'org.springframework.cloud:spring-cloud-contract-stub-runner'
    // contractTestImplementation 'org.springframework.cloud:spring-cloud-starter-contract-verifier'
}

tasks.named('test') {
    useJUnitPlatform()
    ignoreFailures = true  // Allow tests to fail but still generate coverage report
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
    finalizedBy jacocoTestReport
}

// Compiler options to show deprecation details
tasks.withType(JavaCompile) {
    options.compilerArgs += ['-Xlint:deprecation', '-Xlint:unchecked']
}

jacoco {
    toolVersion = "0.8.12"  // Updated to support Java 21
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
        }
        rule {
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.70
            }
        }
    }
}

// Enable coverage verification for CI/CD
check {
    dependsOn jacocoTestCoverageVerification
}

springBoot {
    buildInfo()
}

jar {
    enabled = false
}

bootJar {
    archiveFileName = "${project.name}.jar"
    layered {
        enabled = true
    }
}

// ==========================================
// Code Quality Tool Configurations
// ==========================================

// SonarQube Configuration
sonarqube {
    skipCompile = true  // Fix deprecation warning - set at plugin level
    properties {
        property "sonar.projectName", "Oddiya Backend"
        property "sonar.projectKey", "oddiya-backend"
        property "sonar.organization", "oddiya"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.coverage.exclusions", "**/test/**,**/config/**,**/dto/**,**/entity/**,**/exception/**"
        property "sonar.exclusions", "**/test/**,build/**,gradle/**"
        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java"
        property "sonar.java.binaries", "build/classes"
        property "sonar.java.libraries", "/home/runner/.gradle/caches/modules-2/**/*.jar"
        property "sonar.qualitygate.wait", true
        property "sonar.gradle.skipCompile", "true"  // Also keep as property for compatibility
    }
}

// OWASP Dependency Check Configuration
// Temporarily disabled due to CPE parsing errors
// dependencyCheck {
//     formats = ['HTML', 'JSON', 'XML', 'SARIF']
//     failBuildOnCVSS = 7.0
//     suppressionFile = 'dependency-check-suppressions.xml'
//     analyzedTypes = ['jar']
//     skipTestGroups = true
//     skipConfigurations = ['runtimeClasspath', 'testRuntimeClasspath']
//     failOnError = false
// }

// PMD Configuration
pmd {
    consoleOutput = true
    toolVersion = '6.55.0'
    ruleSets = ['basic', 'braces', 'design', 'empty', 'imports', 'unusedcode']
    ignoreFailures = true
}

// Checkstyle Configuration
checkstyle {
    toolVersion = '10.12.4'
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
    ignoreFailures = true
    maxWarnings = 0
    maxErrors = 0
}

// SpotBugs Configuration
spotbugs {
    toolVersion = '4.7.3'
    ignoreFailures = true
    showStackTraces = false
    showProgress = true
    reportLevel = 'medium'
    effort = 'default'
    excludeFilter = file("${rootDir}/config/spotbugs/exclude.xml")
}

spotbugsMain {
    reports {
        html {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/main.html")
        }
        xml {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/main.xml")
        }
    }
}

spotbugsTest {
    reports {
        html {
            required = true  
            outputLocation = file("$buildDir/reports/spotbugs/test.html")
        }
        xml {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/test.xml")
        }
    }
}

// ==========================================
// Spring Cloud Contract Configuration
// ==========================================

// ==========================================
// Spring Cloud Contract Configuration (commented out for PITest setup)
// ==========================================

// contracts {
//     testFramework = org.springframework.cloud.contract.verifier.config.TestFramework.JUNIT5
//     testMode = 'MockMvc'
//     baseClassForTests = 'com.oddiya.contract.ContractTestBase'
//     generatedTestSourcesDir = file("${buildDir}/generated-test-sources/contracts")
//     contractsDslDir = file("${projectDir}/src/contractTest/resources/contracts")
//     stubsOutputDir = file("${buildDir}/stubs")
//     packageWithBaseClasses = 'com.oddiya.contract'
// }

// // Configure contract test source sets
// sourceSets {
//     contractTest {
//         java {
//             srcDirs = ['src/contractTest/java']
//         }
//         resources {
//             srcDirs = ['src/contractTest/resources']
//         }
//         compileClasspath += main.output + test.output
//         runtimeClasspath += main.output + test.output
//     }
// }

// configurations {
//     contractTestImplementation.extendsFrom testImplementation
//     contractTestRuntimeOnly.extendsFrom testRuntimeOnly
// }

// // Contract test task
// task contractTest(type: Test) {
//     testClassesDirs = sourceSets.contractTest.output.classesDirs
//     classpath = sourceSets.contractTest.runtimeClasspath
//     useJUnitPlatform()
//     testLogging {
//         events "passed", "skipped", "failed"
//         exceptionFormat "full"
//     }
// }

// // Ensure contracts are verified before build
// check.dependsOn contractTest
// contractTest.mustRunAfter test

// Publishing configuration for contract stubs (temporarily commented for PITest setup)
// publishing {
//     publications {
//         maven(MavenPublication) {
//             artifact bootJar
//             
//             artifact(verifierStubsJar) {
//                 classifier = "stubs"
//             }
//         }
//     }
// }

// ==========================================
// PITest Mutation Testing Configuration
// ==========================================

pitest {
    // Java 21 support
    pitestVersion = '1.16.1'
    junit5PluginVersion = '1.2.1'
    
    // Test selection and target classes
    targetClasses.set([
        'com.oddiya.service.*',
        'com.oddiya.controller.*', 
        'com.oddiya.repository.*'
    ])
    
    // Exclude certain classes from mutation testing
    excludedClasses.set([
        'com.oddiya.**.*Config*',
        'com.oddiya.**.*Configuration*',
        'com.oddiya.OddiyaApplication',
        'com.oddiya.entity.**.*',
        'com.oddiya.dto.**.*',
        'com.oddiya.exception.**.*',
        'com.oddiya.**.*Test*',
        'com.oddiya.config.**.*',
        '**.*Builder',
        '**.*Factory'
    ])
    
    // Mutation operators - comprehensive set
    mutators.set([
        'CONDITIONALS_BOUNDARY',
        'INCREMENTS',
        'INVERT_NEGS',
        'MATH',
        'NEGATE_CONDITIONALS',
        'RETURN_VALS',
        'VOID_METHOD_CALLS',
        'NON_VOID_METHOD_CALLS',
        'CONSTRUCTOR_CALLS',
        'INLINE_CONSTS',
        'REMOVE_CONDITIONALS'
    ])
    
    // Coverage and thresholds
    mutationThreshold.set(80)
    coverageThreshold.set(75)
    
    // Performance settings
    threads.set(Runtime.runtime.availableProcessors())
    timeoutConstInMillis.set(4000)
    timeoutFactor.set(1.25)
    
    // Output configuration
    outputFormats.set(['HTML', 'XML', 'CSV'])
    timestampedReports.set(true)
    
    // JVM arguments for Java 21 compatibility
    jvmArgs.set([
        '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
        '--add-opens', 'java.base/java.util=ALL-UNNAMED',
        '--add-opens', 'java.base/java.text=ALL-UNNAMED',
        '--add-opens', 'java.base/java.util.concurrent=ALL-UNNAMED',
        '--add-opens', 'java.base/java.io=ALL-UNNAMED',
        '--add-opens', 'java.base/java.net=ALL-UNNAMED'
    ])
    
    // Test plugin configuration for JUnit 5
    // testPlugin.set('junit5')  // Deprecated in PIT 1.6.7+, auto-detected now
}

// Simplified PITest profile tasks - configure via command line properties
// Usage:
// ./gradlew pitest -Ppitest.targetClasses='com.oddiya.service.*'
// ./gradlew pitest -Ppitest.mutationThreshold=90

// Integration with other tasks
tasks.pitest.dependsOn test
tasks.pitest.shouldRunAfter jacocoTestReport

// Add PITest to check task for CI/CD (uncomment when needed)
//check.dependsOn pitestCritical