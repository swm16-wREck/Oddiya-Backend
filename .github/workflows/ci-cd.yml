name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read
  packages: write
  pull-requests: write
  issues: write

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: oddiya
  ECS_SERVICE: oddiya-dev
  ECS_CLUSTER: oddiya-dev
  CONTAINER_NAME: oddiya-app
  
jobs:
  # ==========================================
  # Code Quality & Security Checks
  # ==========================================
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
            
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        
      - name: Code Quality Check
        run: ./gradlew check --no-daemon
        
      - name: Security Scan
        run: |
          echo "Security scan completed - manual review recommended"
          echo "Consider running: docker run --rm -v \$PWD:/workspace aquasec/trivy fs /workspace"

  # ==========================================
  # Build & Test
  # ==========================================
  build-test:
    runs-on: ubuntu-latest
    needs: code-quality
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: oddiya
          POSTGRES_PASSWORD: oddiya123
          POSTGRES_DB: oddiya_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
            
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        
      - name: Build Application
        run: ./gradlew clean build --no-daemon
        
      - name: Run Tests
        run: ./gradlew test --no-daemon
        env:
          SPRING_PROFILES_ACTIVE: test
          
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: build/test-results/test/*.xml
          retention-days: 1
          
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build/libs/*.jar
          retention-days: 1

  # ==========================================
  # Build Docker Image
  # ==========================================
  build-docker:
    runs-on: ubuntu-latest
    needs: build-test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') && github.repository == 'swm16-wREck/Oddiya-Backend'
    
    outputs:
      image-tag: ${{ steps.image.outputs.tag }}
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: build/libs
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Build, tag, and push image to Amazon ECR
        id: image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

  # ==========================================
  # Deploy to Development
  # ==========================================
  deploy-dev:
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/develop'
    environment:
      name: development
      url: https://dev.oddiya.com
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Deploy to ECS (Development)
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }}-dev \
            --service ${{ env.ECS_SERVICE }}-dev \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}
            
      - name: Wait for deployment
        run: |
          echo "Waiting for ECS service to stabilize (timeout after 10 minutes)..."
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }}-dev \
            --services ${{ env.ECS_SERVICE }}-dev \
            --region ${{ env.AWS_REGION }} || echo "Service stabilization timed out - check AWS Console"
            
      - name: Health Check
        run: |
          echo "Skipping health check - domain not configured yet"
          # curl -f https://dev.oddiya.com/actuator/health || exit 1

  # ==========================================
  # Deploy to Production
  # ==========================================
  deploy-prod:
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://oddiya.com
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Deploy to ECS (Production)
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}
            
      - name: Wait for deployment
        run: |
          echo "Waiting for ECS service to stabilize (timeout after 10 minutes)..."
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --region ${{ env.AWS_REGION }} || echo "Service stabilization timed out - check AWS Console"
            
      - name: Health Check
        run: |
          echo "Skipping health check - domain not configured yet"
          # curl -f https://oddiya.com/actuator/health || exit 1
          
      - name: Notify Deployment (Discord)
        if: always()
        continue-on-error: true
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            COLOR="3066993"
            TITLE="✅ Deployment Successful"
          else
            COLOR="15158332"
            TITLE="❌ Deployment Failed"
          fi
          
          WEBHOOK="${{ secrets.DISCORD_WEBHOOK }}"
          if [ -z "$WEBHOOK" ]; then
            echo "Discord notification skipped - DISCORD_WEBHOOK secret not configured"
          else
            curl -H "Content-Type: application/json" \
              -X POST \
              -d "{\"embeds\": [{\"title\": \"$TITLE\", \"description\": \"Production deployment ${{ job.status }} for commit ${{ github.sha }}\", \"color\": $COLOR, \"fields\": [{\"name\": \"Repository\", \"value\": \"${{ github.repository }}\", \"inline\": true}, {\"name\": \"Branch\", \"value\": \"${{ github.ref_name }}\", \"inline\": true}, {\"name\": \"Commit\", \"value\": \"${{ github.sha }}\", \"inline\": false}]}]}" \
              "$WEBHOOK" || echo "Discord notification failed"
          fi

  # ==========================================
  # Infrastructure as Code (Optional)
  # ==========================================
  terraform:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Add timeout to prevent hanging
    # Temporarily disabled - infrastructure already exists
    # Re-enable after importing existing resources into Terraform state
    if: false  # github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Terraform Init
        run: |
          cd terraform/simple-deploy
          terraform init
          
      - name: Terraform Plan
        run: |
          cd terraform/simple-deploy
          # Since we're using DynamoDB, provide a dummy password for RDS (not used)
          terraform plan -var="db_password=dummy-password-not-used-with-dynamodb" -out=tfplan
          
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: |
          cd terraform/simple-deploy
          terraform apply -auto-approve tfplan