name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read
  packages: write
  pull-requests: write
  issues: write

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: oddiya
  ECS_SERVICE: oddiya-dev-service
  ECS_CLUSTER: oddiya-dev-cluster
  ECS_TASK_DEFINITION: oddiya-dev
  CONTAINER_NAME: oddiya
  DEPLOYMENT_TIMEOUT: 1800
  HEALTH_CHECK_RETRIES: 15
  ROLLBACK_ENABLED: true

jobs:
  # ==========================================
  # Test & Code Quality
  # ==========================================
  test:
    name: Test & Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # For SonarCloud

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run tests
        run: ./gradlew test --no-daemon

      - name: Code Coverage
        if: github.event_name == 'pull_request'
        run: ./gradlew jacocoTestReport

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: build/test-results/test/

  # ==========================================
  # Build & Deploy to ECS
  # ==========================================
  deploy:
    name: Build & Deploy
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 45
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    outputs:
      deployment-status: ${{ steps.deploy.outputs.deployment_status }}
      task-definition: ${{ steps.register.outputs.task_definition_arn }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build application
        run: |
          chmod +x gradlew
          ./gradlew clean build -x test

      - name: Build, tag, and push Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build and push with commit SHA
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          # Also tag as latest
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Download task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_TASK_DEFINITION }} \
            --query taskDefinition > task-definition.json

      - name: Update task definition with new image
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Register task definition
        id: register
        run: |
          TASK_DEFINITION_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://${{ steps.task-def.outputs.task-definition }} \
            --region ${{ env.AWS_REGION }} \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          
          echo "task_definition_arn=$TASK_DEFINITION_ARN" >> $GITHUB_OUTPUT
          echo "üìù Registered task definition: $TASK_DEFINITION_ARN"

      - name: Deploy to ECS
        id: deploy
        run: |
          echo "üöÄ Starting deployment..."
          
          # Store current task definition for rollback
          CURRENT_TASK_DEF=$(aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --region ${{ env.AWS_REGION }} \
            --query 'services[0].taskDefinition' --output text)
          echo "current_task_def=$CURRENT_TASK_DEF" >> $GITHUB_OUTPUT
          
          # Update service
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition ${{ steps.register.outputs.task_definition_arn }} \
            --region ${{ env.AWS_REGION }}
          
          # Monitor deployment
          DEPLOY_START_TIME=$(date +%s)
          TIMEOUT_SECONDS=${{ env.DEPLOYMENT_TIMEOUT }}
          ELAPSED=0
          
          while [ $ELAPSED -lt $TIMEOUT_SECONDS ]; do
            DEPLOYMENT_STATUS=$(aws ecs describe-services \
              --cluster ${{ env.ECS_CLUSTER }} \
              --services ${{ env.ECS_SERVICE }} \
              --region ${{ env.AWS_REGION }} \
              --query 'services[0].deployments[?status==`PRIMARY`] | [0].rolloutState' \
              --output text)
            
            if [ "$DEPLOYMENT_STATUS" = "COMPLETED" ]; then
              echo "‚úÖ Deployment completed successfully!"
              echo "deployment_status=success" >> $GITHUB_OUTPUT
              break
            elif [ "$DEPLOYMENT_STATUS" = "FAILED" ]; then
              echo "‚ùå Deployment failed!"
              echo "deployment_status=failed" >> $GITHUB_OUTPUT
              exit 1
            fi
            
            sleep 30
            ELAPSED=$(($(date +%s) - $DEPLOY_START_TIME))
          done
          
          if [ $ELAPSED -ge $TIMEOUT_SECONDS ]; then
            echo "‚è∞ Deployment timed out"
            echo "deployment_status=timeout" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Verify deployment health
        if: success()
        run: |
          echo "üè• Verifying deployment health..."
          
          # Wait for tasks to stabilize
          sleep 60
          
          # Check running tasks
          RUNNING_COUNT=$(aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --region ${{ env.AWS_REGION }} \
            --query 'services[0].runningCount' --output text)
          
          DESIRED_COUNT=$(aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --region ${{ env.AWS_REGION }} \
            --query 'services[0].desiredCount' --output text)
          
          if [ "$RUNNING_COUNT" -eq "$DESIRED_COUNT" ]; then
            echo "‚úÖ All tasks are running ($RUNNING_COUNT/$DESIRED_COUNT)"
          else
            echo "‚ö†Ô∏è Task count mismatch: $RUNNING_COUNT/$DESIRED_COUNT"
            exit 1
          fi

      - name: Rollback on failure
        if: failure() && env.ROLLBACK_ENABLED == 'true' && steps.deploy.outputs.current_task_def != ''
        run: |
          echo "üîÑ Rolling back to previous version..."
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition ${{ steps.deploy.outputs.current_task_def }} \
            --region ${{ env.AWS_REGION }}
          echo "üîô Rollback initiated"

  # ==========================================
  # Post-Deployment Monitoring
  # ==========================================
  monitor:
    name: Post-Deployment Monitoring
    needs: deploy
    runs-on: ubuntu-latest
    if: needs.deploy.outputs.deployment-status == 'success'
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Monitor application health
        run: |
          echo "üìä Monitoring application health for 5 minutes..."
          
          END_TIME=$(($(date +%s) + 300))
          CHECKS=0
          FAILURES=0
          
          while [ $(date +%s) -lt $END_TIME ]; do
            # Check ECS service health
            RUNNING=$(aws ecs describe-services \
              --cluster ${{ env.ECS_CLUSTER }} \
              --services ${{ env.ECS_SERVICE }} \
              --region ${{ env.AWS_REGION }} \
              --query 'services[0].runningCount' --output text)
            
            if [ "$RUNNING" -lt "1" ]; then
              FAILURES=$((FAILURES + 1))
              echo "‚ö†Ô∏è Warning: No running tasks detected"
            fi
            
            CHECKS=$((CHECKS + 1))
            
            # Alert if failure rate is high
            if [ $FAILURES -gt 3 ]; then
              echo "üö® High failure rate detected!"
              exit 1
            fi
            
            sleep 60
          done
          
          echo "‚úÖ Post-deployment monitoring completed"
          echo "üìä Health check summary: $((CHECKS - FAILURES))/$CHECKS successful"

      - name: Create deployment summary
        if: always()
        run: |
          echo "## üìã Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Cluster**: ${{ env.ECS_CLUSTER }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Service**: ${{ env.ECS_SERVICE }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Task Definition**: ${{ needs.deploy.outputs.task-definition }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ needs.deploy.outputs.deployment-status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date)" >> $GITHUB_STEP_SUMMARY