name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: oddiya
  ECS_SERVICE: oddiya-dev-service
  ECS_CLUSTER: oddiya-dev-cluster
  ECS_TASK_DEFINITION: oddiya-dev
  CONTAINER_NAME: oddiya
  DEPLOYMENT_TIMEOUT: 1800  # 30 minutes in seconds
  HEALTH_CHECK_RETRIES: 15
  ROLLBACK_ENABLED: true

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 45  # Extended timeout for resilient deployments

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build with Gradle
        run: |
          chmod +x gradlew
          ./gradlew clean build -x test
          
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and push it to ECR
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          
          # Also tag as latest
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Download current task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_TASK_DEFINITION }} \
            --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      # Pre-deployment health check
      - name: Pre-deployment health check
        id: pre-check
        run: |
          echo "=== PRE-DEPLOYMENT HEALTH CHECK ==="
          
          # Check if cluster and service exist
          if ! aws ecs describe-clusters --clusters ${{ env.ECS_CLUSTER }} --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
            echo "‚ùå ECS cluster ${{ env.ECS_CLUSTER }} not found"
            exit 1
          fi
          echo "‚úÖ ECS cluster exists"
          
          if ! aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
            echo "‚ùå ECS service ${{ env.ECS_SERVICE }} not found"
            exit 1
          fi
          echo "‚úÖ ECS service exists"
          
          # Check current service health
          CURRENT_STATUS=$(aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --region ${{ env.AWS_REGION }} \
            --query 'services[0].status' --output text)
          
          if [ "$CURRENT_STATUS" != "ACTIVE" ]; then
            echo "‚ö†Ô∏è Service status is $CURRENT_STATUS, proceeding with caution"
          else
            echo "‚úÖ Service is ACTIVE"
          fi
          
          # Store current task definition for rollback
          CURRENT_TASK_DEF=$(aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --region ${{ env.AWS_REGION }} \
            --query 'services[0].taskDefinition' --output text)
          echo "current_task_def=$CURRENT_TASK_DEF" >> $GITHUB_OUTPUT
          echo "üìù Current task definition: $CURRENT_TASK_DEF"
          
      - name: Deploy Amazon ECS task definition with monitoring
        id: deploy
        run: |
          echo "=== STARTING DEPLOYMENT ==="
          
          # Deploy with timeout and monitoring
          DEPLOY_START_TIME=$(date +%s)
          echo "üöÄ Starting deployment at $(date)"
          
          # Update service with new task definition
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition ${{ steps.task-def.outputs.task-definition }} \
            --region ${{ env.AWS_REGION }}
          
          echo "‚úÖ Service update initiated"
          
          # Monitor deployment progress
          DEPLOYMENT_ID=$(aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --region ${{ env.AWS_REGION }} \
            --query 'services[0].deployments[?status==`PRIMARY`].id' \
            --output text)
          
          echo "üìä Monitoring deployment: $DEPLOYMENT_ID"
          
          # Wait for deployment with progress monitoring
          TIMEOUT_SECONDS=${{ env.DEPLOYMENT_TIMEOUT }}
          ELAPSED=0
          LAST_STATUS=""
          
          while [ $ELAPSED -lt $TIMEOUT_SECONDS ]; do
            DEPLOYMENT_STATUS=$(aws ecs describe-services \
              --cluster ${{ env.ECS_CLUSTER }} \
              --services ${{ env.ECS_SERVICE }} \
              --region ${{ env.AWS_REGION }} \
              --query 'services[0].deployments[?status==`PRIMARY`] | [0].rolloutState' \
              --output text)
            
            RUNNING_COUNT=$(aws ecs describe-services \
              --cluster ${{ env.ECS_CLUSTER }} \
              --services ${{ env.ECS_SERVICE }} \
              --region ${{ env.AWS_REGION }} \
              --query 'services[0].runningCount' --output text)
            
            DESIRED_COUNT=$(aws ecs describe-services \
              --cluster ${{ env.ECS_CLUSTER }} \
              --services ${{ env.ECS_SERVICE }} \
              --region ${{ env.AWS_REGION }} \
              --query 'services[0].desiredCount' --output text)
            
            if [ "$DEPLOYMENT_STATUS" != "$LAST_STATUS" ]; then
              echo "üîÑ Deployment status: $DEPLOYMENT_STATUS (Running: $RUNNING_COUNT/$DESIRED_COUNT) - $(date)"
              LAST_STATUS="$DEPLOYMENT_STATUS"
            fi
            
            if [ "$DEPLOYMENT_STATUS" = "COMPLETED" ]; then
              echo "‚úÖ Deployment completed successfully!"
              echo "deployment_status=success" >> $GITHUB_OUTPUT
              break
            elif [ "$DEPLOYMENT_STATUS" = "FAILED" ]; then
              echo "‚ùå Deployment failed!"
              echo "deployment_status=failed" >> $GITHUB_OUTPUT
              
              # Get failure details
              aws ecs describe-services \
                --cluster ${{ env.ECS_CLUSTER }} \
                --services ${{ env.ECS_SERVICE }} \
                --region ${{ env.AWS_REGION }} \
                --query 'services[0].events[:5].[createdAt,message]' \
                --output table
              
              exit 1
            fi
            
            sleep 30
            ELAPSED=$(($(date +%s) - $DEPLOY_START_TIME))
          done
          
          if [ $ELAPSED -ge $TIMEOUT_SECONDS ]; then
            echo "‚è∞ Deployment timed out after $TIMEOUT_SECONDS seconds"
            echo "deployment_status=timeout" >> $GITHUB_OUTPUT
            
            # Check if we should rollback
            if [ "${{ env.ROLLBACK_ENABLED }}" = "true" ]; then
              echo "üîÑ Rollback is enabled, will attempt rollback"
            fi
            
            exit 1
          fi
          
      - name: Rollback on failure
        if: failure() && env.ROLLBACK_ENABLED == 'true' && steps.pre-check.outputs.current_task_def != ''
        run: |
          echo "=== INITIATING ROLLBACK ==="
          echo "üîÑ Rolling back to previous task definition: ${{ steps.pre-check.outputs.current_task_def }}"
          
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition ${{ steps.pre-check.outputs.current_task_def }} \
            --region ${{ env.AWS_REGION }}
          
          echo "‚ö†Ô∏è Rollback initiated. Waiting for service to stabilize..."
          
          # Wait for rollback to complete (shorter timeout)
          timeout 900 aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --region ${{ env.AWS_REGION }} || true
          
          echo "üîô Rollback attempt completed"
          
      - name: Post-deployment verification
        if: success()
        run: |
          echo "=== POST-DEPLOYMENT VERIFICATION ==="
          
          # Verify service status
          SERVICE_INFO=$(aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --region ${{ env.AWS_REGION }} \
            --query 'services[0].{Status:status,Running:runningCount,Desired:desiredCount,TaskDefinition:taskDefinition}' \
            --output json)
          
          echo "üìä Final service status:"
          echo "$SERVICE_INFO" | jq .
          
          # Health check with retries
          echo "üè• Performing health checks..."
          
          # Get service endpoint (if available)
          LOAD_BALANCER=$(aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --region ${{ env.AWS_REGION }} \
            --query 'services[0].loadBalancers[0].targetGroupArn' \
            --output text)
          
          if [ "$LOAD_BALANCER" != "None" ] && [ "$LOAD_BALANCER" != "null" ]; then
            echo "üîç Found load balancer, checking health..."
            
            # Get target group health
            TARGET_GROUP_ARN="$LOAD_BALANCER"
            aws elbv2 describe-target-health \
              --target-group-arn "$TARGET_GROUP_ARN" \
              --region ${{ env.AWS_REGION }} || echo "‚ö†Ô∏è Could not check target health"
          else
            echo "‚ÑπÔ∏è No load balancer configured, skipping health check"
          fi
          
          # Verify tasks are healthy
          UNHEALTHY_TASKS=$(aws ecs list-tasks \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service-name ${{ env.ECS_SERVICE }} \
            --desired-status STOPPED \
            --region ${{ env.AWS_REGION }} \
            --query 'length(taskArns)')
          
          if [ "$UNHEALTHY_TASKS" -gt 0 ]; then
            echo "‚ö†Ô∏è Found $UNHEALTHY_TASKS recently stopped tasks"
            
            # Show recent task failures
            aws ecs list-tasks \
              --cluster ${{ env.ECS_CLUSTER }} \
              --service-name ${{ env.ECS_SERVICE }} \
              --desired-status STOPPED \
              --region ${{ env.AWS_REGION }} \
              --query 'taskArns[:3]' \
              --output text | xargs -I {} aws ecs describe-tasks \
                --cluster ${{ env.ECS_CLUSTER }} \
                --tasks {} \
                --region ${{ env.AWS_REGION }} \
                --query 'tasks[0].{TaskArn:taskArn,StoppedAt:stoppedAt,StoppedReason:stoppedReason}' \
                --output table || true
          else
            echo "‚úÖ No recently failed tasks"
          fi
          
          echo "üéâ Deployment verification completed!"