name: Integration Tests

on:
  workflow_call:  # Make workflow reusable
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, ready_for_review]
  push:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write

env:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
  JAVA_VERSION: '21'
  JAVA_DISTRIBUTION: 'temurin'
  AWS_REGION: ap-northeast-2

jobs:
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: oddiya
          POSTGRES_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
          POSTGRES_DB: oddiya_integration_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 5432:5432
      
      # Redis service commented out - not using Redis in Phase 2
      # redis:
      #   image: redis:7-alpine
      #   options: >-
      #     --health-cmd "redis-cli ping"
      #     --health-interval 10s
      #     --health-timeout 5s
      #     --health-retries 5
      #   ports:
      #     - 6379:6379
      
      localstack:
        image: localstack/localstack:3.0
        env:
          SERVICES: s3,sqs,dynamodb,lambda
          DOCKER_HOST: unix:///var/run/docker.sock
          DEBUG: 1
          DATA_DIR: /tmp/localstack/data
        options: >-
          --health-cmd "curl -f http://localhost:4566/_localstack/health"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
        ports:
          - 4566:4566
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
    
    strategy:
      matrix:
        test-suite: [core, aws, auth, api]
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: gradle
      
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            build/cache
          key: ${{ runner.os }}-gradle-integration-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-integration-
            ${{ runner.os }}-gradle-
      
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      
      - name: Wait for services to be ready
        run: |
          echo "Waiting for PostgreSQL..."
          timeout 60 bash -c 'until pg_isready -h localhost -p 5432 -U oddiya; do sleep 2; done'
          
          # Skip Redis check for now - not using Redis in Phase 2
          # echo "Waiting for Redis..."
          # timeout 60 bash -c 'until redis-cli -h localhost -p 6379 ping | grep PONG; do sleep 2; done'
          
          echo "Waiting for LocalStack..."
          timeout 120 bash -c 'until curl -f http://localhost:4566/_localstack/health; do sleep 5; done'
          
          echo "All services are ready!"
      
      - name: Setup LocalStack resources
        run: |
          # AWS CLI is pre-installed on GitHub Actions runners
          # Verify AWS CLI is available
          aws --version || echo "AWS CLI not found, but continuing..."
          
          # Configure AWS CLI for LocalStack
          aws configure set aws_access_key_id test
          aws configure set aws_secret_access_key test
          aws configure set region ${{ env.AWS_REGION }}
          
          # Create S3 bucket
          aws --endpoint-url=http://localhost:4566 s3 mb s3://oddiya-test-bucket || true
          
          # Create SQS queues
          aws --endpoint-url=http://localhost:4566 sqs create-queue --queue-name oddiya-test-queue || true
          
          # Create DynamoDB tables
          aws --endpoint-url=http://localhost:4566 dynamodb create-table \
            --table-name oddiya-users-test \
            --attribute-definitions \
              AttributeName=id,AttributeType=S \
            --key-schema \
              AttributeName=id,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST || true
          
          # Verify resources
          echo "S3 buckets:"
          aws --endpoint-url=http://localhost:4566 s3 ls
          
          echo "SQS queues:"
          aws --endpoint-url=http://localhost:4566 sqs list-queues
          
          echo "DynamoDB tables:"
          aws --endpoint-url=http://localhost:4566 dynamodb list-tables
      
      - name: Compile source and test code
        run: ./gradlew compileJava compileTestJava --no-daemon
      
      - name: Run integration tests - ${{ matrix.test-suite }}
        run: |
          case "${{ matrix.test-suite }}" in
            "core")
              ./gradlew test --tests "*IntegrationTest*" --tests "*IT" --no-daemon --continue
              ;;
            "aws")
              ./gradlew test --tests "*S3*" --tests "*SQS*" --tests "*DynamoDB*" --tests "*AWS*" --no-daemon --continue
              ;;
            "auth")
              ./gradlew test --tests "*Auth*" --tests "*Security*" --tests "*Jwt*" --tests "*OAuth*" --no-daemon --continue
              ;;
            "api")
              ./gradlew test --tests "*Controller*Test" --tests "*EndToEnd*" --no-daemon --continue
              ;;
          esac
        env:
          SPRING_PROFILES_ACTIVE: integration-test
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_REGION: ${{ env.AWS_REGION }}
          LOCALSTACK_ENDPOINT: http://localhost:4566
          TESTCONTAINERS_RYUK_DISABLED: true
          DATABASE_URL: jdbc:postgresql://localhost:5432/oddiya_integration_test
          DATABASE_USERNAME: oddiya
          DATABASE_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
          REDIS_HOST: localhost
          REDIS_PORT: 6379
      
      - name: Generate integration test report
        if: always()
        run: |
          ./gradlew jacocoTestReport --no-daemon || true
          echo "## Integration Test Results - ${{ matrix.test-suite }}" >> $GITHUB_STEP_SUMMARY
          if [ -f build/reports/tests/test/index.html ]; then
            echo "✅ Test results generated successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ No test results generated" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Publish integration test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Integration Test Results - ${{ matrix.test-suite }}
          path: build/test-results/test/*.xml
          reporter: java-junit
          fail-on-error: false
      
      - name: Collect service logs
        if: failure()
        run: |
          echo "## Service Logs" >> $GITHUB_STEP_SUMMARY
          echo "### PostgreSQL logs:" >> $GITHUB_STEP_SUMMARY
          docker logs ${{ job.services.postgres.id }} || echo "No PostgreSQL logs available"
          
          echo "### Redis logs:" >> $GITHUB_STEP_SUMMARY  
          docker logs ${{ job.services.redis.id }} || echo "No Redis logs available"
          
          echo "### LocalStack logs:" >> $GITHUB_STEP_SUMMARY
          docker logs ${{ job.services.localstack.id }} || echo "No LocalStack logs available"
      
      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results-${{ matrix.test-suite }}
          path: |
            build/test-results/test/*.xml
            build/reports/tests/test/
            build/reports/jacoco/test/
          retention-days: 7
          if-no-files-found: warn
      
      - name: Upload service logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: service-logs-${{ matrix.test-suite }}
          path: /tmp/service-logs/
          retention-days: 7
          if-no-files-found: ignore

  database-migration-test:
    name: Database Migration Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: oddiya
          POSTGRES_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
          POSTGRES_DB: oddiya_migration_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: gradle
      
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      
      - name: Test database schema migration
        run: |
          # Test application startup with clean database
          ./gradlew bootRun --args="--spring.profiles.active=test --spring.jpa.hibernate.ddl-auto=create" &
          APP_PID=$!
          
          # Wait for application to start
          sleep 30
          
          # Check if application is running
          if ps -p $APP_PID > /dev/null; then
            echo "✅ Application started successfully with schema creation"
            kill $APP_PID
          else
            echo "❌ Application failed to start"
            exit 1
          fi
        env:
          DATABASE_URL: jdbc:postgresql://localhost:5432/oddiya_migration_test
          DATABASE_USERNAME: oddiya
          DATABASE_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}

  combine-integration-results:
    name: Combine Integration Test Results
    runs-on: ubuntu-latest
    needs: [integration-tests, database-migration-test]
    if: always()
    
    steps:
      - name: Download all integration test results
        uses: actions/download-artifact@v4
        with:
          pattern: integration-test-results-*
          merge-multiple: true
          path: combined-integration-results
      
      - name: Generate integration test summary
        run: |
          echo "## Integration Test Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          total_files=0
          if [ -d "combined-integration-results" ]; then
            total_files=$(find combined-integration-results -name "*.xml" | wc -l)
            echo "📊 Total integration test result files: $total_files" >> $GITHUB_STEP_SUMMARY
            
            if [ $total_files -gt 0 ]; then
              echo "✅ Integration tests executed successfully" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ No integration test results found" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ No combined results directory found" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Suite Results:" >> $GITHUB_STEP_SUMMARY
          echo "- **Core Integration:** ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **AWS Integration:** ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY  
          echo "- **Auth Integration:** ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **API Integration:** ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Database Migration:** ${{ needs.database-migration-test.result }}" >> $GITHUB_STEP_SUMMARY
      
      - name: Upload combined integration results
        uses: actions/upload-artifact@v4
        with:
          name: all-integration-test-results
          path: combined-integration-results/
          retention-days: 30
      
      - name: Post integration test summary to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.issue.number;
            const overallStatus = '${{ needs.integration-tests.result }}' === 'success' && 
                                 '${{ needs.database-migration-test.result }}' === 'success' ? 
                                 '✅ All Passed' : '❌ Some Failed';
            
            const comment = `## 🔧 Integration Test Pipeline Summary
            
            **Overall Status:** ${overallStatus}
            **Commit:** \`${{ github.sha }}\`
            
            ### Test Suite Results:
            | Test Suite | Status |
            |------------|--------|
            | Core Integration | ${{ needs.integration-tests.result }} |
            | AWS Integration | ${{ needs.integration-tests.result }} |
            | Auth Integration | ${{ needs.integration-tests.result }} |
            | API Integration | ${{ needs.integration-tests.result }} |
            | Database Migration | ${{ needs.database-migration-test.result }} |
            
            ### Services Used:
            - ✅ PostgreSQL 15
            - ✅ Redis 7  
            - ✅ LocalStack (AWS Services)
            
            View detailed results in the [Actions tab](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}).
            `;
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: comment
            });

  block-merge-on-failure:
    name: Block Merge on Test Failure
    runs-on: ubuntu-latest
    needs: [integration-tests, database-migration-test, combine-integration-results]
    if: github.event_name == 'pull_request' && (needs.integration-tests.result != 'success' || needs.database-migration-test.result != 'success')
    
    steps:
      - name: Block merge due to test failures
        run: |
          echo "❌ Integration tests failed. Blocking merge."
          echo "## ❌ Integration Tests Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The following test suites failed:" >> $GITHUB_STEP_SUMMARY
          echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Database Migration: ${{ needs.database-migration-test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please fix failing tests before merging this PR." >> $GITHUB_STEP_SUMMARY
          exit 1