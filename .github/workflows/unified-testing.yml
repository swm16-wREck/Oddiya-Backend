name: Unified Testing

on:
  workflow_call:
    inputs:
      test-type:
        description: 'Type of test to run'
        required: false
        type: string
        default: 'all'
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'build.gradle'
      - '.github/workflows/unified-testing.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'build.gradle'

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2
  AWS_REGION: ap-northeast-2

jobs:
  # Determine which tests to run
  test-matrix:
    name: Determine Test Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set test matrix
        id: set-matrix
        run: |
          if [ "${{ inputs.test-type }}" == "unit" ]; then
            echo 'matrix={"test-suite":["unit-entity","unit-service","unit-controller"]}' >> $GITHUB_OUTPUT
          elif [ "${{ inputs.test-type }}" == "integration" ]; then
            echo 'matrix={"test-suite":["integration-core","integration-aws","integration-api"]}' >> $GITHUB_OUTPUT
          elif [ "${{ inputs.test-type }}" == "mutation" ]; then
            echo 'matrix={"test-suite":["mutation"]}' >> $GITHUB_OUTPUT
          else
            echo 'matrix={"test-suite":["unit-entity","unit-service","unit-controller","integration-core","integration-aws","mutation"]}' >> $GITHUB_OUTPUT
          fi

  # Run tests in parallel
  run-tests:
    name: Run ${{ matrix.test-suite }} Tests
    needs: test-matrix
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.test-matrix.outputs.matrix) }}
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: oddiya
          POSTGRES_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
          POSTGRES_DB: oddiya_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 5432:5432
      
      localstack:
        image: localstack/localstack:3.0
        ports:
          - 4566:4566
        env:
          SERVICES: s3,dynamodb,sqs,sns,cloudwatch
          AWS_DEFAULT_REGION: ap-northeast-2
          EDGE_PORT: 4566
        options: >-
          --health-cmd "curl -f http://localhost:4566/_localstack/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # For mutation testing coverage
          
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.gradle/build-cache
          key: ${{ runner.os }}-gradle-${{ matrix.test-suite }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-${{ matrix.test-suite }}-
            ${{ runner.os }}-gradle-
            
      - name: Cache test results
        uses: actions/cache@v3
        with:
          path: |
            build/test-results
            build/reports
          key: ${{ runner.os }}-test-${{ matrix.test-suite }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-test-${{ matrix.test-suite }}-
            
      - name: Setup LocalStack (for AWS tests)
        if: contains(matrix.test-suite, 'aws') || contains(matrix.test-suite, 'integration')
        run: |
          pip install awscli-local
          awslocal s3 mb s3://test-bucket
          awslocal dynamodb create-table \
            --table-name test-table \
            --attribute-definitions AttributeName=id,AttributeType=S \
            --key-schema AttributeName=id,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST \
            --region ap-northeast-2
            
      - name: Grant execute permission
        run: chmod +x gradlew
        
      # Unit Tests
      - name: Run Unit Entity Tests
        if: matrix.test-suite == 'unit-entity'
        run: ./gradlew test --tests "com.oddiya.entity.*" --no-daemon
        env:
          SPRING_PROFILES_ACTIVE: test
          
      - name: Run Unit Service Tests
        if: matrix.test-suite == 'unit-service'
        run: ./gradlew test --tests "com.oddiya.service.*" --no-daemon
        env:
          SPRING_PROFILES_ACTIVE: test
          
      - name: Run Unit Controller Tests
        if: matrix.test-suite == 'unit-controller'
        run: ./gradlew test --tests "com.oddiya.controller.*" --no-daemon
        env:
          SPRING_PROFILES_ACTIVE: test
          
      # Integration Tests
      - name: Run Core Integration Tests
        if: matrix.test-suite == 'integration-core'
        run: ./gradlew integrationTest --tests "com.oddiya.integration.*" --no-daemon
        env:
          SPRING_PROFILES_ACTIVE: integration-test
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          DATABASE_NAME: oddiya_test
          DATABASE_USERNAME: oddiya
          DATABASE_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
          
      - name: Run AWS Integration Tests
        if: matrix.test-suite == 'integration-aws'
        run: ./gradlew integrationTest --tests "com.oddiya.aws.*" --no-daemon
        env:
          SPRING_PROFILES_ACTIVE: integration-test
          AWS_ENDPOINT: http://localhost:4566
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_REGION: ap-northeast-2
          
      # Mutation Testing
      - name: Run Mutation Tests
        if: matrix.test-suite == 'mutation'
        run: ./gradlew pitest --no-daemon
        env:
          SPRING_PROFILES_ACTIVE: test
          
      # Coverage Report
      - name: Generate Coverage Report
        if: always() && !contains(matrix.test-suite, 'mutation')
        run: ./gradlew jacocoTestReport --no-daemon
        
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-suite }}
          path: |
            build/test-results/
            build/reports/tests/
            
      - name: Upload coverage reports
        if: always() && !contains(matrix.test-suite, 'mutation')
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.test-suite }}
          path: build/reports/jacoco/
          
      - name: Upload mutation reports
        if: matrix.test-suite == 'mutation'
        uses: actions/upload-artifact@v4
        with:
          name: mutation-report
          path: build/reports/pitest/

  # Aggregate test results
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: run-tests
    if: always()
    
    steps:
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          merge-multiple: true
          
      - name: Download all coverage reports
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-*
          merge-multiple: true
          
      - name: Generate summary
        run: |
          echo "## Test Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          
          for result in test-results-*; do
            if [ -d "$result" ]; then
              suite_name=$(echo $result | sed 's/test-results-//')
              if [ -f "$result/TEST-*.xml" ]; then
                echo "| $suite_name | ✅ |" >> $GITHUB_STEP_SUMMARY
              else
                echo "| $suite_name | ❌ |" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          done
          
      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('${{ github.step_summary }}', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });