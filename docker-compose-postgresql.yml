# Docker Compose for Local PostgreSQL Development
# This configuration provides a complete PostgreSQL development environment
# with PostGIS extensions and monitoring tools

version: '3.8'

services:
  # PostgreSQL Database with PostGIS
  postgres:
    image: postgis/postgis:15-3.4
    container_name: oddiya-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-oddiya}
      POSTGRES_USER: ${POSTGRES_USER:-oddiya_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-oddiya_password}
      PGDATA: /var/lib/postgresql/data/pgdata
      # Performance tuning for development
      POSTGRES_INITDB_ARGS: "--data-checksums"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      # Persistent data storage
      - postgres_data:/var/lib/postgresql/data
      # Custom initialization scripts
      - ./database/init:/docker-entrypoint-initdb.d:ro
      # Custom PostgreSQL configuration
      - ./database/config/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      # Backup directory
      - ./database/backups:/backups
    command: >
      postgres 
      -c config_file=/etc/postgresql/postgresql.conf
      -c logging_collector=on
      -c log_directory=/var/lib/postgresql/data/log
      -c log_filename=postgresql-%Y-%m-%d_%H%M%S.log
      -c log_statement=ddl
      -c log_min_duration_statement=1000
      -c shared_preload_libraries=pg_stat_statements,postgis-3
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-oddiya_user} -d ${POSTGRES_DB:-oddiya}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - oddiya-network
    labels:
      - "project=oddiya"
      - "service=database"
      - "environment=development"

  # pgAdmin for Database Management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: oddiya-pgadmin-dev
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@oddiya.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./database/pgadmin/servers.json:/pgadmin4/servers.json:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - oddiya-network
    labels:
      - "project=oddiya"
      - "service=database-admin"
      - "environment=development"

  # PostgreSQL Exporter for Monitoring (Optional)
  postgres-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter:latest
    container_name: oddiya-postgres-exporter-dev
    restart: unless-stopped
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER:-oddiya_user}:${POSTGRES_PASSWORD:-oddiya_password}@postgres:5432/${POSTGRES_DB:-oddiya}?sslmode=disable"
      PG_EXPORTER_EXTEND_QUERY_PATH: "/etc/postgres_exporter/queries.yaml"
    ports:
      - "${POSTGRES_EXPORTER_PORT:-9187}:9187"
    volumes:
      - ./database/monitoring/queries.yaml:/etc/postgres_exporter/queries.yaml:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - oddiya-network
    profiles:
      - monitoring
    labels:
      - "project=oddiya"
      - "service=monitoring"
      - "environment=development"

  # Redis for Caching (Optional)
  redis:
    image: redis:7-alpine
    container_name: oddiya-redis-dev
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./database/config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - oddiya-network
    profiles:
      - cache
    labels:
      - "project=oddiya"
      - "service=cache"
      - "environment=development"

  # Grafana for Monitoring Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: oddiya-grafana-dev
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-grafana123}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-worldmap-panel"
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./database/monitoring/grafana:/etc/grafana/provisioning:ro
    networks:
      - oddiya-network
    profiles:
      - monitoring
    labels:
      - "project=oddiya"
      - "service=monitoring"
      - "environment=development"

  # Prometheus for Metrics Collection (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: oddiya-prometheus-dev
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./database/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - oddiya-network
    profiles:
      - monitoring
    labels:
      - "project=oddiya"
      - "service=monitoring"
      - "environment=development"

# Named volumes for persistent data
volumes:
  postgres_data:
    driver: local
    labels:
      - "project=oddiya"
      - "service=database"
      - "type=data"
  
  pgadmin_data:
    driver: local
    labels:
      - "project=oddiya"
      - "service=database-admin"
      - "type=data"
  
  redis_data:
    driver: local
    labels:
      - "project=oddiya"
      - "service=cache"
      - "type=data"
  
  grafana_data:
    driver: local
    labels:
      - "project=oddiya"
      - "service=monitoring"
      - "type=data"
  
  prometheus_data:
    driver: local
    labels:
      - "project=oddiya"
      - "service=monitoring"
      - "type=data"

# Custom network
networks:
  oddiya-network:
    driver: bridge
    labels:
      - "project=oddiya"
      - "environment=development"